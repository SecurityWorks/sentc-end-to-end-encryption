#![allow(
	non_camel_case_types,
	unused,
	clippy::redundant_closure,
	clippy::useless_conversion,
	clippy::unit_arg,
	clippy::double_parens,
	non_snake_case,
	clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use crate::sentc::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_decode_jwt_impl(port_: MessagePort, jwt: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Claims, _>(
		WrapInfo {
			debug_name: "decode_jwt",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_jwt = jwt.wire2api();
			move |task_callback| decode_jwt(api_jwt)
		},
	)
}
fn wire_check_user_identifier_available_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
		WrapInfo {
			debug_name: "check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| check_user_identifier_available(api_base_url, api_auth_token, api_user_identifier)
		},
	)
}
fn wire_prepare_check_user_identifier_available_impl(port_: MessagePort, user_identifier: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "prepare_check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| prepare_check_user_identifier_available(api_user_identifier)
		},
	)
}
fn wire_done_check_user_identifier_available_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
		WrapInfo {
			debug_name: "done_check_user_identifier_available",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_check_user_identifier_available(api_server_output)
		},
	)
}
fn wire_generate_user_register_data_impl(port_: MessagePort) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GeneratedRegisterData, _>(
		WrapInfo {
			debug_name: "generate_user_register_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || move |task_callback| generate_user_register_data(),
	)
}
fn wire_prepare_register_impl(port_: MessagePort, user_identifier: impl Wire2Api<String> + UnwindSafe, password: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "prepare_register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| prepare_register(api_user_identifier, api_password)
		},
	)
}
fn wire_done_register_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "done_register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_register(api_server_output)
		},
	)
}
fn wire_register_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "register",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| register(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}
fn wire_prepare_register_device_start_impl(
	port_: MessagePort,
	device_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "prepare_register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| prepare_register_device_start(api_device_identifier, api_password)
		},
	)
}
fn wire_done_register_device_start_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "done_register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| done_register_device_start(api_server_output)
		},
	)
}
fn wire_register_device_start_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	device_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "register_device_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_device_identifier = device_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| register_device_start(api_base_url, api_auth_token, api_device_identifier, api_password)
		},
	)
}
fn wire_prepare_register_device_impl(
	port_: MessagePort,
	server_output: impl Wire2Api<String> + UnwindSafe,
	user_keys: impl Wire2Api<String> + UnwindSafe,
	key_count: impl Wire2Api<i32> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, PreRegisterDeviceData, _>(
		WrapInfo {
			debug_name: "prepare_register_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			let api_user_keys = user_keys.wire2api();
			let api_key_count = key_count.wire2api();
			move |task_callback| prepare_register_device(api_server_output, api_user_keys, api_key_count)
		},
	)
}
fn wire_register_device_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	server_output: impl Wire2Api<String> + UnwindSafe,
	key_count: impl Wire2Api<i32> + UnwindSafe,
	user_keys: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RegisterDeviceData, _>(
		WrapInfo {
			debug_name: "register_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_server_output = server_output.wire2api();
			let api_key_count = key_count.wire2api();
			let api_user_keys = user_keys.wire2api();
			move |task_callback| {
				register_device(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_server_output,
					api_key_count,
					api_user_keys,
				)
			}
		},
	)
}
fn wire_user_device_key_session_upload_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	session_id: impl Wire2Api<String> + UnwindSafe,
	user_public_key: impl Wire2Api<String> + UnwindSafe,
	group_keys: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "user_device_key_session_upload",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_session_id = session_id.wire2api();
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			move |task_callback| {
				user_device_key_session_upload(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_session_id,
					api_user_public_key,
					api_group_keys,
				)
			}
		},
	)
}
fn wire_login_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserLoginOut, _>(
		WrapInfo {
			debug_name: "login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			move |task_callback| login(api_base_url, api_auth_token, api_user_identifier, api_password)
		},
	)
}
fn wire_mfa_login_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	master_key_encryption: impl Wire2Api<String> + UnwindSafe,
	auth_key: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	token: impl Wire2Api<String> + UnwindSafe,
	recovery: impl Wire2Api<bool> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserData, _>(
		WrapInfo {
			debug_name: "mfa_login",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_master_key_encryption = master_key_encryption.wire2api();
			let api_auth_key = auth_key.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_token = token.wire2api();
			let api_recovery = recovery.wire2api();
			move |task_callback| {
				mfa_login(
					api_base_url,
					api_auth_token,
					api_master_key_encryption,
					api_auth_key,
					api_user_identifier,
					api_token,
					api_recovery,
				)
			}
		},
	)
}
fn wire_done_fetch_user_key_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	server_output: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserKeyData, _>(
		WrapInfo {
			debug_name: "done_fetch_user_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| done_fetch_user_key(api_private_key, api_server_output)
		},
	)
}
fn wire_fetch_user_key_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	key_id: impl Wire2Api<String> + UnwindSafe,
	private_key: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserKeyData, _>(
		WrapInfo {
			debug_name: "fetch_user_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_key_id = key_id.wire2api();
			let api_private_key = private_key.wire2api();
			move |task_callback| fetch_user_key(api_base_url, api_auth_token, api_jwt, api_key_id, api_private_key)
		},
	)
}
fn wire_get_fresh_jwt_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	password: impl Wire2Api<String> + UnwindSafe,
	mfa_token: impl Wire2Api<Option<String>> + UnwindSafe,
	mfa_recovery: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "get_fresh_jwt",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_password = password.wire2api();
			let api_mfa_token = mfa_token.wire2api();
			let api_mfa_recovery = mfa_recovery.wire2api();
			move |task_callback| {
				get_fresh_jwt(
					api_base_url,
					api_auth_token,
					api_user_identifier,
					api_password,
					api_mfa_token,
					api_mfa_recovery,
				)
			}
		},
	)
}
fn wire_refresh_jwt_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	refresh_token: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "refresh_jwt",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_refresh_token = refresh_token.wire2api();
			move |task_callback| refresh_jwt(api_base_url, api_auth_token, api_jwt, api_refresh_token)
		},
	)
}
fn wire_init_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	refresh_token: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserInitServerOutput, _>(
		WrapInfo {
			debug_name: "init_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_refresh_token = refresh_token.wire2api();
			move |task_callback| init_user(api_base_url, api_auth_token, api_jwt, api_refresh_token)
		},
	)
}
fn wire_user_create_safety_number_impl(
	port_: MessagePort,
	verify_key_1: impl Wire2Api<String> + UnwindSafe,
	user_id_1: impl Wire2Api<String> + UnwindSafe,
	verify_key_2: impl Wire2Api<Option<String>> + UnwindSafe,
	user_id_2: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "user_create_safety_number",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_verify_key_1 = verify_key_1.wire2api();
			let api_user_id_1 = user_id_1.wire2api();
			let api_verify_key_2 = verify_key_2.wire2api();
			let api_user_id_2 = user_id_2.wire2api();
			move |task_callback| user_create_safety_number(api_verify_key_1, api_user_id_1, api_verify_key_2, api_user_id_2)
		},
	)
}
fn wire_user_verify_user_public_key_impl(
	port_: MessagePort,
	verify_key: impl Wire2Api<String> + UnwindSafe,
	public_key: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
		WrapInfo {
			debug_name: "user_verify_user_public_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_verify_key = verify_key.wire2api();
			let api_public_key = public_key.wire2api();
			move |task_callback| user_verify_user_public_key(api_verify_key, api_public_key)
		},
	)
}
fn wire_get_user_devices_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_id: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<UserDeviceList>, _>(
		WrapInfo {
			debug_name: "get_user_devices",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			move |task_callback| {
				get_user_devices(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_id,
				)
			}
		},
	)
}
fn wire_reset_password_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	new_password: impl Wire2Api<String> + UnwindSafe,
	decrypted_private_key: impl Wire2Api<String> + UnwindSafe,
	decrypted_sign_key: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "reset_password",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_new_password = new_password.wire2api();
			let api_decrypted_private_key = decrypted_private_key.wire2api();
			let api_decrypted_sign_key = decrypted_sign_key.wire2api();
			move |task_callback| {
				reset_password(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_new_password,
					api_decrypted_private_key,
					api_decrypted_sign_key,
				)
			}
		},
	)
}
fn wire_change_password_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
	old_password: impl Wire2Api<String> + UnwindSafe,
	new_password: impl Wire2Api<String> + UnwindSafe,
	mfa_token: impl Wire2Api<Option<String>> + UnwindSafe,
	mfa_recovery: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "change_password",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			let api_old_password = old_password.wire2api();
			let api_new_password = new_password.wire2api();
			let api_mfa_token = mfa_token.wire2api();
			let api_mfa_recovery = mfa_recovery.wire2api();
			move |task_callback| {
				change_password(
					api_base_url,
					api_auth_token,
					api_user_identifier,
					api_old_password,
					api_new_password,
					api_mfa_token,
					api_mfa_recovery,
				)
			}
		},
	)
}
fn wire_delete_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	fresh_jwt: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "delete_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_fresh_jwt = fresh_jwt.wire2api();
			move |task_callback| delete_user(api_base_url, api_auth_token, api_fresh_jwt)
		},
	)
}
fn wire_delete_device_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	fresh_jwt: impl Wire2Api<String> + UnwindSafe,
	device_id: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "delete_device",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_fresh_jwt = fresh_jwt.wire2api();
			let api_device_id = device_id.wire2api();
			move |task_callback| delete_device(api_base_url, api_auth_token, api_fresh_jwt, api_device_id)
		},
	)
}
fn wire_update_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	user_identifier: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "update_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_user_identifier = user_identifier.wire2api();
			move |task_callback| update_user(api_base_url, api_auth_token, api_jwt, api_user_identifier)
		},
	)
}
fn wire_user_fetch_public_key_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, UserPublicKeyData, _>(
		WrapInfo {
			debug_name: "user_fetch_public_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_id = user_id.wire2api();
			move |task_callback| user_fetch_public_key(api_base_url, api_auth_token, api_user_id)
		},
	)
}
fn wire_user_fetch_verify_key_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	verify_key_id: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "user_fetch_verify_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_user_id = user_id.wire2api();
			let api_verify_key_id = verify_key_id.wire2api();
			move |task_callback| user_fetch_verify_key(api_base_url, api_auth_token, api_user_id, api_verify_key_id)
		},
	)
}
fn wire_user_key_rotation_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	public_device_key: impl Wire2Api<String> + UnwindSafe,
	pre_user_key: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "user_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_public_device_key = public_device_key.wire2api();
			let api_pre_user_key = pre_user_key.wire2api();
			move |task_callback| {
				user_key_rotation(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_public_device_key,
					api_pre_user_key,
				)
			}
		},
	)
}
fn wire_user_pre_done_key_rotation_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<KeyRotationGetOut>, _>(
		WrapInfo {
			debug_name: "user_pre_done_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			move |task_callback| user_pre_done_key_rotation(api_base_url, api_auth_token, api_jwt)
		},
	)
}
fn wire_user_get_done_key_rotation_server_input_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, KeyRotationInput, _>(
		WrapInfo {
			debug_name: "user_get_done_key_rotation_server_input",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| user_get_done_key_rotation_server_input(api_server_output)
		},
	)
}
fn wire_user_finish_key_rotation_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	server_output: impl Wire2Api<String> + UnwindSafe,
	pre_group_key: impl Wire2Api<String> + UnwindSafe,
	public_key: impl Wire2Api<String> + UnwindSafe,
	private_key: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "user_finish_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_server_output = server_output.wire2api();
			let api_pre_group_key = pre_group_key.wire2api();
			let api_public_key = public_key.wire2api();
			let api_private_key = private_key.wire2api();
			move |task_callback| {
				user_finish_key_rotation(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_server_output,
					api_pre_group_key,
					api_public_key,
					api_private_key,
				)
			}
		},
	)
}
fn wire_register_raw_otp_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OtpRegister, _>(
		WrapInfo {
			debug_name: "register_raw_otp",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			move |task_callback| register_raw_otp(api_base_url, api_auth_token, api_jwt)
		},
	)
}
fn wire_register_otp_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	issuer: impl Wire2Api<String> + UnwindSafe,
	audience: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OtpRegisterUrl, _>(
		WrapInfo {
			debug_name: "register_otp",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_issuer = issuer.wire2api();
			let api_audience = audience.wire2api();
			move |task_callback| register_otp(api_base_url, api_auth_token, api_jwt, api_issuer, api_audience)
		},
	)
}
fn wire_get_otp_recover_keys_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OtpRecoveryKeysOutput, _>(
		WrapInfo {
			debug_name: "get_otp_recover_keys",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			move |task_callback| get_otp_recover_keys(api_base_url, api_auth_token, api_jwt)
		},
	)
}
fn wire_reset_raw_otp_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OtpRegister, _>(
		WrapInfo {
			debug_name: "reset_raw_otp",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			move |task_callback| reset_raw_otp(api_base_url, api_auth_token, api_jwt)
		},
	)
}
fn wire_reset_otp_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	issuer: impl Wire2Api<String> + UnwindSafe,
	audience: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, OtpRegisterUrl, _>(
		WrapInfo {
			debug_name: "reset_otp",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_issuer = issuer.wire2api();
			let api_audience = audience.wire2api();
			move |task_callback| reset_otp(api_base_url, api_auth_token, api_jwt, api_issuer, api_audience)
		},
	)
}
fn wire_disable_otp_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "disable_otp",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			move |task_callback| disable_otp(api_base_url, api_auth_token, api_jwt)
		},
	)
}
fn wire_group_prepare_create_group_impl(
	port_: MessagePort,
	creators_public_key: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	starter: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_prepare_create_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_creators_public_key = creators_public_key.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_starter = starter.wire2api();
			move |task_callback| group_prepare_create_group(api_creators_public_key, api_sign_key, api_starter)
		},
	)
}
fn wire_group_create_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	creators_public_key: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	starter: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_create_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_creators_public_key = creators_public_key.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_starter = starter.wire2api();
			move |task_callback| {
				group_create_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_creators_public_key,
					api_group_as_member,
					api_sign_key,
					api_starter,
				)
			}
		},
	)
}
fn wire_group_create_child_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	parent_public_key: impl Wire2Api<String> + UnwindSafe,
	parent_id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	starter: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_create_child_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_parent_public_key = parent_public_key.wire2api();
			let api_parent_id = parent_id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_starter = starter.wire2api();
			move |task_callback| {
				group_create_child_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_parent_public_key,
					api_parent_id,
					api_admin_rank,
					api_group_as_member,
					api_sign_key,
					api_starter,
				)
			}
		},
	)
}
fn wire_group_create_connected_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	connected_group_id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	parent_public_key: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	starter: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_create_connected_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_connected_group_id = connected_group_id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_parent_public_key = parent_public_key.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_starter = starter.wire2api();
			move |task_callback| {
				group_create_connected_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_connected_group_id,
					api_admin_rank,
					api_parent_public_key,
					api_group_as_member,
					api_sign_key,
					api_starter,
				)
			}
		},
	)
}
fn wire_group_extract_group_data_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GroupOutData, _>(
		WrapInfo {
			debug_name: "group_extract_group_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| group_extract_group_data(api_server_output)
		},
	)
}
fn wire_group_extract_group_keys_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupOutDataKeys>, _>(
		WrapInfo {
			debug_name: "group_extract_group_keys",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| group_extract_group_keys(api_server_output)
		},
	)
}
fn wire_group_get_group_data_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GroupOutData, _>(
		WrapInfo {
			debug_name: "group_get_group_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| group_get_group_data(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_get_group_keys_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_key_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupOutDataKeys>, _>(
		WrapInfo {
			debug_name: "group_get_group_keys",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_key_id = last_fetched_key_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_group_keys(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_last_fetched_time,
					api_last_fetched_key_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_group_key_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	key_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GroupOutDataKeys, _>(
		WrapInfo {
			debug_name: "group_get_group_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_key_id = key_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_group_key(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_key_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_decrypt_key_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	server_key_data: impl Wire2Api<String> + UnwindSafe,
	verify_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GroupKeyData, _>(
		WrapInfo {
			debug_name: "group_decrypt_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_server_key_data = server_key_data.wire2api();
			let api_verify_key = verify_key.wire2api();
			move |task_callback| group_decrypt_key(api_private_key, api_server_key_data, api_verify_key)
		},
	)
}
fn wire_group_decrypt_hmac_key_impl(
	port_: MessagePort,
	group_key: impl Wire2Api<String> + UnwindSafe,
	server_key_data: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_decrypt_hmac_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_group_key = group_key.wire2api();
			let api_server_key_data = server_key_data.wire2api();
			move |task_callback| group_decrypt_hmac_key(api_group_key, api_server_key_data)
		},
	)
}
fn wire_group_decrypt_sortable_key_impl(
	port_: MessagePort,
	group_key: impl Wire2Api<String> + UnwindSafe,
	server_key_data: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_decrypt_sortable_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_group_key = group_key.wire2api();
			let api_server_key_data = server_key_data.wire2api();
			move |task_callback| group_decrypt_sortable_key(api_group_key, api_server_key_data)
		},
	)
}
fn wire_group_get_member_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupUserListItem>, _>(
		WrapInfo {
			debug_name: "group_get_member",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_member(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_last_fetched_time,
					api_last_fetched_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_group_updates_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GroupDataCheckUpdateServerOutput, _>(
		WrapInfo {
			debug_name: "group_get_group_updates",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| group_get_group_updates(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_get_all_first_level_children_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupChildrenList>, _>(
		WrapInfo {
			debug_name: "group_get_all_first_level_children",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_all_first_level_children(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_groups_for_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<ListGroups>, _>(
		WrapInfo {
			debug_name: "group_get_groups_for_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_id = group_id.wire2api();
			move |task_callback| {
				group_get_groups_for_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_id,
				)
			}
		},
	)
}
fn wire_group_prepare_keys_for_new_member_impl(
	port_: MessagePort,
	user_public_key: impl Wire2Api<String> + UnwindSafe,
	group_keys: impl Wire2Api<String> + UnwindSafe,
	key_count: impl Wire2Api<i32> + UnwindSafe,
	rank: impl Wire2Api<Option<i32>> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_prepare_keys_for_new_member",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			let api_key_count = key_count.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			move |task_callback| {
				group_prepare_keys_for_new_member(
					api_user_public_key,
					api_group_keys,
					api_key_count,
					api_rank,
					api_admin_rank,
				)
			}
		},
	)
}
fn wire_group_invite_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	key_count: impl Wire2Api<i32> + UnwindSafe,
	rank: impl Wire2Api<Option<i32>> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	auto_invite: impl Wire2Api<bool> + UnwindSafe,
	group_invite: impl Wire2Api<bool> + UnwindSafe,
	re_invite: impl Wire2Api<bool> + UnwindSafe,
	user_public_key: impl Wire2Api<String> + UnwindSafe,
	group_keys: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_invite_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_key_count = key_count.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_auto_invite = auto_invite.wire2api();
			let api_group_invite = group_invite.wire2api();
			let api_re_invite = re_invite.wire2api();
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_invite_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_key_count,
					api_rank,
					api_admin_rank,
					api_auto_invite,
					api_group_invite,
					api_re_invite,
					api_user_public_key,
					api_group_keys,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_invite_user_session_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	auto_invite: impl Wire2Api<bool> + UnwindSafe,
	session_id: impl Wire2Api<String> + UnwindSafe,
	user_public_key: impl Wire2Api<String> + UnwindSafe,
	group_keys: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_invite_user_session",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_auto_invite = auto_invite.wire2api();
			let api_session_id = session_id.wire2api();
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_invite_user_session(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_auto_invite,
					api_session_id,
					api_user_public_key,
					api_group_keys,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_invites_for_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupInviteReqList>, _>(
		WrapInfo {
			debug_name: "group_get_invites_for_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_invites_for_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_accept_invite_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_accept_invite",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_accept_invite(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_reject_invite_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_reject_invite",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_reject_invite(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_sent_join_req_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupInviteReqList>, _>(
		WrapInfo {
			debug_name: "group_get_sent_join_req_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_sent_join_req_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_sent_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupInviteReqList>, _>(
		WrapInfo {
			debug_name: "group_get_sent_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_group_id = last_fetched_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_sent_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_last_fetched_time,
					api_last_fetched_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_delete_sent_join_req_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	join_req_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_delete_sent_join_req_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_join_req_group_id = join_req_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_delete_sent_join_req_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_join_req_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_delete_sent_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	join_req_group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_delete_sent_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_join_req_group_id = join_req_group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_delete_sent_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_join_req_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_join_reqs_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	last_fetched_time: impl Wire2Api<String> + UnwindSafe,
	last_fetched_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<GroupJoinReqList>, _>(
		WrapInfo {
			debug_name: "group_get_join_reqs",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_last_fetched_time = last_fetched_time.wire2api();
			let api_last_fetched_id = last_fetched_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_get_join_reqs(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_last_fetched_time,
					api_last_fetched_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_reject_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	rejected_user_id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_reject_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_rejected_user_id = rejected_user_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_reject_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_rejected_user_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_accept_join_req_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	key_count: impl Wire2Api<i32> + UnwindSafe,
	rank: impl Wire2Api<Option<i32>> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	user_public_key: impl Wire2Api<String> + UnwindSafe,
	group_keys: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_accept_join_req",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_key_count = key_count.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_accept_join_req(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_key_count,
					api_rank,
					api_admin_rank,
					api_user_public_key,
					api_group_keys,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_join_user_session_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	session_id: impl Wire2Api<String> + UnwindSafe,
	user_public_key: impl Wire2Api<String> + UnwindSafe,
	group_keys: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_join_user_session",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_session_id = session_id.wire2api();
			let api_user_public_key = user_public_key.wire2api();
			let api_group_keys = group_keys.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_join_user_session(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_session_id,
					api_user_public_key,
					api_group_keys,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_stop_group_invites_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_stop_group_invites",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_stop_group_invites(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_leave_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "leave_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| leave_group(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_prepare_key_rotation_impl(
	port_: MessagePort,
	pre_group_key: impl Wire2Api<String> + UnwindSafe,
	public_key: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	starter: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_prepare_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_pre_group_key = pre_group_key.wire2api();
			let api_public_key = public_key.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_starter = starter.wire2api();
			move |task_callback| group_prepare_key_rotation(api_pre_group_key, api_public_key, api_sign_key, api_starter)
		},
	)
}
fn wire_group_done_key_rotation_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	public_key: impl Wire2Api<String> + UnwindSafe,
	pre_group_key: impl Wire2Api<String> + UnwindSafe,
	server_output: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_done_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_public_key = public_key.wire2api();
			let api_pre_group_key = pre_group_key.wire2api();
			let api_server_output = server_output.wire2api();
			move |task_callback| group_done_key_rotation(api_private_key, api_public_key, api_pre_group_key, api_server_output)
		},
	)
}
fn wire_group_key_rotation_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	public_key: impl Wire2Api<String> + UnwindSafe,
	pre_group_key: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	starter: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_public_key = public_key.wire2api();
			let api_pre_group_key = pre_group_key.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_starter = starter.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_key_rotation(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_public_key,
					api_pre_group_key,
					api_sign_key,
					api_starter,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_pre_done_key_rotation_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<KeyRotationGetOut>, _>(
		WrapInfo {
			debug_name: "group_pre_done_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| group_pre_done_key_rotation(api_base_url, api_auth_token, api_jwt, api_id, api_group_as_member)
		},
	)
}
fn wire_group_get_done_key_rotation_server_input_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, KeyRotationInput, _>(
		WrapInfo {
			debug_name: "group_get_done_key_rotation_server_input",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| group_get_done_key_rotation_server_input(api_server_output)
		},
	)
}
fn wire_group_finish_key_rotation_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	server_output: impl Wire2Api<String> + UnwindSafe,
	pre_group_key: impl Wire2Api<String> + UnwindSafe,
	public_key: impl Wire2Api<String> + UnwindSafe,
	private_key: impl Wire2Api<String> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_finish_key_rotation",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_server_output = server_output.wire2api();
			let api_pre_group_key = pre_group_key.wire2api();
			let api_public_key = public_key.wire2api();
			let api_private_key = private_key.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_finish_key_rotation(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_server_output,
					api_pre_group_key,
					api_public_key,
					api_private_key,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_prepare_update_rank_impl(
	port_: MessagePort,
	user_id: impl Wire2Api<String> + UnwindSafe,
	rank: impl Wire2Api<i32> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "group_prepare_update_rank",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_user_id = user_id.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			move |task_callback| group_prepare_update_rank(api_user_id, api_rank, api_admin_rank)
		},
	)
}
fn wire_group_update_rank_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	rank: impl Wire2Api<i32> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_update_rank",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_rank = rank.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_update_rank(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_rank,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_kick_user_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	user_id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_kick_user",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_user_id = user_id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_kick_user(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_user_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_delete_group_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	admin_rank: impl Wire2Api<i32> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "group_delete_group",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_admin_rank = admin_rank.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				group_delete_group(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_admin_rank,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_group_get_public_key_data_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, GroupPublicKeyData, _>(
		WrapInfo {
			debug_name: "group_get_public_key_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_id = id.wire2api();
			move |task_callback| group_get_public_key_data(api_base_url, api_auth_token, api_id)
		},
	)
}
fn wire_split_head_and_encrypted_data_impl(port_: MessagePort, data: impl Wire2Api<Vec<u8>> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EncryptedHead, _>(
		WrapInfo {
			debug_name: "split_head_and_encrypted_data",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_data = data.wire2api();
			move |task_callback| split_head_and_encrypted_data(api_data)
		},
	)
}
fn wire_split_head_and_encrypted_string_impl(port_: MessagePort, data: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EncryptedHead, _>(
		WrapInfo {
			debug_name: "split_head_and_encrypted_string",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_data = data.wire2api();
			move |task_callback| split_head_and_encrypted_string(api_data)
		},
	)
}
fn wire_deserialize_head_from_string_impl(port_: MessagePort, head: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EncryptedHead, _>(
		WrapInfo {
			debug_name: "deserialize_head_from_string",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_head = head.wire2api();
			move |task_callback| deserialize_head_from_string(api_head)
		},
	)
}
fn wire_encrypt_raw_symmetric_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, CryptoRawOutput, _>(
		WrapInfo {
			debug_name: "encrypt_raw_symmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			let api_sign_key = sign_key.wire2api();
			move |task_callback| encrypt_raw_symmetric(api_key, api_data, api_sign_key)
		},
	)
}
fn wire_decrypt_raw_symmetric_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	encrypted_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	head: impl Wire2Api<String> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
		WrapInfo {
			debug_name: "decrypt_raw_symmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_encrypted_data = encrypted_data.wire2api();
			let api_head = head.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| decrypt_raw_symmetric(api_key, api_encrypted_data, api_head, api_verify_key_data)
		},
	)
}
fn wire_encrypt_symmetric_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
		WrapInfo {
			debug_name: "encrypt_symmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			let api_sign_key = sign_key.wire2api();
			move |task_callback| encrypt_symmetric(api_key, api_data, api_sign_key)
		},
	)
}
fn wire_decrypt_symmetric_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	encrypted_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
		WrapInfo {
			debug_name: "decrypt_symmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_encrypted_data = encrypted_data.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| decrypt_symmetric(api_key, api_encrypted_data, api_verify_key_data)
		},
	)
}
fn wire_encrypt_string_symmetric_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "encrypt_string_symmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			let api_sign_key = sign_key.wire2api();
			move |task_callback| encrypt_string_symmetric(api_key, api_data, api_sign_key)
		},
	)
}
fn wire_decrypt_string_symmetric_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	encrypted_data: impl Wire2Api<String> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "decrypt_string_symmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_encrypted_data = encrypted_data.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| decrypt_string_symmetric(api_key, api_encrypted_data, api_verify_key_data)
		},
	)
}
fn wire_encrypt_raw_asymmetric_impl(
	port_: MessagePort,
	reply_public_key_data: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, CryptoRawOutput, _>(
		WrapInfo {
			debug_name: "encrypt_raw_asymmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key_data = reply_public_key_data.wire2api();
			let api_data = data.wire2api();
			let api_sign_key = sign_key.wire2api();
			move |task_callback| encrypt_raw_asymmetric(api_reply_public_key_data, api_data, api_sign_key)
		},
	)
}
fn wire_decrypt_raw_asymmetric_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	head: impl Wire2Api<String> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
		WrapInfo {
			debug_name: "decrypt_raw_asymmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_encrypted_data = encrypted_data.wire2api();
			let api_head = head.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| decrypt_raw_asymmetric(api_private_key, api_encrypted_data, api_head, api_verify_key_data)
		},
	)
}
fn wire_encrypt_asymmetric_impl(
	port_: MessagePort,
	reply_public_key_data: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
		WrapInfo {
			debug_name: "encrypt_asymmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key_data = reply_public_key_data.wire2api();
			let api_data = data.wire2api();
			let api_sign_key = sign_key.wire2api();
			move |task_callback| encrypt_asymmetric(api_reply_public_key_data, api_data, api_sign_key)
		},
	)
}
fn wire_decrypt_asymmetric_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_data: impl Wire2Api<Vec<u8>> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
		WrapInfo {
			debug_name: "decrypt_asymmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_encrypted_data = encrypted_data.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| decrypt_asymmetric(api_private_key, api_encrypted_data, api_verify_key_data)
		},
	)
}
fn wire_encrypt_string_asymmetric_impl(
	port_: MessagePort,
	reply_public_key_data: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "encrypt_string_asymmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key_data = reply_public_key_data.wire2api();
			let api_data = data.wire2api();
			let api_sign_key = sign_key.wire2api();
			move |task_callback| encrypt_string_asymmetric(api_reply_public_key_data, api_data, api_sign_key)
		},
	)
}
fn wire_decrypt_string_asymmetric_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_data: impl Wire2Api<String> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "decrypt_string_asymmetric",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_encrypted_data = encrypted_data.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| decrypt_string_asymmetric(api_private_key, api_encrypted_data, api_verify_key_data)
		},
	)
}
fn wire_generate_non_register_sym_key_impl(port_: MessagePort, master_key: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, NonRegisteredKeyOutput, _>(
		WrapInfo {
			debug_name: "generate_non_register_sym_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_master_key = master_key.wire2api();
			move |task_callback| generate_non_register_sym_key(api_master_key)
		},
	)
}
fn wire_generate_non_register_sym_key_by_public_key_impl(port_: MessagePort, reply_public_key: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, NonRegisteredKeyOutput, _>(
		WrapInfo {
			debug_name: "generate_non_register_sym_key_by_public_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key = reply_public_key.wire2api();
			move |task_callback| generate_non_register_sym_key_by_public_key(api_reply_public_key)
		},
	)
}
fn wire_decrypt_sym_key_impl(
	port_: MessagePort,
	master_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_symmetric_key_info: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "decrypt_sym_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_master_key = master_key.wire2api();
			let api_encrypted_symmetric_key_info = encrypted_symmetric_key_info.wire2api();
			move |task_callback| decrypt_sym_key(api_master_key, api_encrypted_symmetric_key_info)
		},
	)
}
fn wire_decrypt_sym_key_by_private_key_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_symmetric_key_info: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "decrypt_sym_key_by_private_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_encrypted_symmetric_key_info = encrypted_symmetric_key_info.wire2api();
			move |task_callback| decrypt_sym_key_by_private_key(api_private_key, api_encrypted_symmetric_key_info)
		},
	)
}
fn wire_done_fetch_sym_key_impl(
	port_: MessagePort,
	master_key: impl Wire2Api<String> + UnwindSafe,
	server_out: impl Wire2Api<String> + UnwindSafe,
	non_registered: impl Wire2Api<bool> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "done_fetch_sym_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_master_key = master_key.wire2api();
			let api_server_out = server_out.wire2api();
			let api_non_registered = non_registered.wire2api();
			move |task_callback| done_fetch_sym_key(api_master_key, api_server_out, api_non_registered)
		},
	)
}
fn wire_done_fetch_sym_key_by_private_key_impl(
	port_: MessagePort,
	private_key: impl Wire2Api<String> + UnwindSafe,
	server_out: impl Wire2Api<String> + UnwindSafe,
	non_registered: impl Wire2Api<bool> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "done_fetch_sym_key_by_private_key",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.wire2api();
			let api_server_out = server_out.wire2api();
			let api_non_registered = non_registered.wire2api();
			move |task_callback| done_fetch_sym_key_by_private_key(api_private_key, api_server_out, api_non_registered)
		},
	)
}
fn wire_create_searchable_raw_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<String> + UnwindSafe,
	full: impl Wire2Api<bool> + UnwindSafe,
	limit: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
		WrapInfo {
			debug_name: "create_searchable_raw",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			let api_full = full.wire2api();
			let api_limit = limit.wire2api();
			move |task_callback| create_searchable_raw(api_key, api_data, api_full, api_limit)
		},
	)
}
fn wire_create_searchable_impl(
	port_: MessagePort,
	key: impl Wire2Api<String> + UnwindSafe,
	data: impl Wire2Api<String> + UnwindSafe,
	full: impl Wire2Api<bool> + UnwindSafe,
	limit: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SearchableCreateOutput, _>(
		WrapInfo {
			debug_name: "create_searchable",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			let api_full = full.wire2api();
			let api_limit = limit.wire2api();
			move |task_callback| create_searchable(api_key, api_data, api_full, api_limit)
		},
	)
}
fn wire_search_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe, data: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "search",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			move |task_callback| search(api_key, api_data)
		},
	)
}
fn wire_sortable_encrypt_raw_number_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe, data: impl Wire2Api<u64> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
		WrapInfo {
			debug_name: "sortable_encrypt_raw_number",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			move |task_callback| sortable_encrypt_raw_number(api_key, api_data)
		},
	)
}
fn wire_sortable_encrypt_number_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe, data: impl Wire2Api<u64> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SortableEncryptOutput, _>(
		WrapInfo {
			debug_name: "sortable_encrypt_number",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			move |task_callback| sortable_encrypt_number(api_key, api_data)
		},
	)
}
fn wire_sortable_encrypt_raw_string_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe, data: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
		WrapInfo {
			debug_name: "sortable_encrypt_raw_string",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			move |task_callback| sortable_encrypt_raw_string(api_key, api_data)
		},
	)
}
fn wire_sortable_encrypt_string_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe, data: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SortableEncryptOutput, _>(
		WrapInfo {
			debug_name: "sortable_encrypt_string",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_key = key.wire2api();
			let api_data = data.wire2api();
			move |task_callback| sortable_encrypt_string(api_key, api_data)
		},
	)
}
fn wire_file_download_file_meta_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<Option<String>> + UnwindSafe,
	id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FileData, _>(
		WrapInfo {
			debug_name: "file_download_file_meta",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_id = id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				file_download_file_meta(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_file_download_and_decrypt_file_part_start_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	url_prefix: impl Wire2Api<Option<String>> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	part_id: impl Wire2Api<String> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FileDownloadResult, _>(
		WrapInfo {
			debug_name: "file_download_and_decrypt_file_part_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_url_prefix = url_prefix.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_part_id = part_id.wire2api();
			let api_content_key = content_key.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| {
				file_download_and_decrypt_file_part_start(
					api_base_url,
					api_url_prefix,
					api_auth_token,
					api_part_id,
					api_content_key,
					api_verify_key_data,
				)
			}
		},
	)
}
fn wire_file_download_and_decrypt_file_part_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	url_prefix: impl Wire2Api<Option<String>> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	part_id: impl Wire2Api<String> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	verify_key_data: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FileDownloadResult, _>(
		WrapInfo {
			debug_name: "file_download_and_decrypt_file_part",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_url_prefix = url_prefix.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_part_id = part_id.wire2api();
			let api_content_key = content_key.wire2api();
			let api_verify_key_data = verify_key_data.wire2api();
			move |task_callback| {
				file_download_and_decrypt_file_part(
					api_base_url,
					api_url_prefix,
					api_auth_token,
					api_part_id,
					api_content_key,
					api_verify_key_data,
				)
			}
		},
	)
}
fn wire_file_download_part_list_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	file_id: impl Wire2Api<String> + UnwindSafe,
	last_sequence: impl Wire2Api<String> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<FilePartListItem>, _>(
		WrapInfo {
			debug_name: "file_download_part_list",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_file_id = file_id.wire2api();
			let api_last_sequence = last_sequence.wire2api();
			move |task_callback| file_download_part_list(api_base_url, api_auth_token, api_file_id, api_last_sequence)
		},
	)
}
fn wire_file_register_file_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	master_key_id: impl Wire2Api<String> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_content_key: impl Wire2Api<String> + UnwindSafe,
	belongs_to_id: impl Wire2Api<Option<String>> + UnwindSafe,
	belongs_to_type: impl Wire2Api<String> + UnwindSafe,
	file_name: impl Wire2Api<Option<String>> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FileRegisterOutput, _>(
		WrapInfo {
			debug_name: "file_register_file",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_master_key_id = master_key_id.wire2api();
			let api_content_key = content_key.wire2api();
			let api_encrypted_content_key = encrypted_content_key.wire2api();
			let api_belongs_to_id = belongs_to_id.wire2api();
			let api_belongs_to_type = belongs_to_type.wire2api();
			let api_file_name = file_name.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				file_register_file(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_master_key_id,
					api_content_key,
					api_encrypted_content_key,
					api_belongs_to_id,
					api_belongs_to_type,
					api_file_name,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
fn wire_file_prepare_register_file_impl(
	port_: MessagePort,
	master_key_id: impl Wire2Api<String> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	encrypted_content_key: impl Wire2Api<String> + UnwindSafe,
	belongs_to_id: impl Wire2Api<Option<String>> + UnwindSafe,
	belongs_to_type: impl Wire2Api<String> + UnwindSafe,
	file_name: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FilePrepareRegister, _>(
		WrapInfo {
			debug_name: "file_prepare_register_file",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_master_key_id = master_key_id.wire2api();
			let api_content_key = content_key.wire2api();
			let api_encrypted_content_key = encrypted_content_key.wire2api();
			let api_belongs_to_id = belongs_to_id.wire2api();
			let api_belongs_to_type = belongs_to_type.wire2api();
			let api_file_name = file_name.wire2api();
			move |task_callback| {
				file_prepare_register_file(
					api_master_key_id,
					api_content_key,
					api_encrypted_content_key,
					api_belongs_to_id,
					api_belongs_to_type,
					api_file_name,
				)
			}
		},
	)
}
fn wire_file_done_register_file_impl(port_: MessagePort, server_output: impl Wire2Api<String> + UnwindSafe) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FileDoneRegister, _>(
		WrapInfo {
			debug_name: "file_done_register_file",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.wire2api();
			move |task_callback| file_done_register_file(api_server_output)
		},
	)
}
fn wire_file_upload_part_start_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	url_prefix: impl Wire2Api<Option<String>> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	session_id: impl Wire2Api<String> + UnwindSafe,
	end: impl Wire2Api<bool> + UnwindSafe,
	sequence: impl Wire2Api<i32> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	part: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "file_upload_part_start",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_url_prefix = url_prefix.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_session_id = session_id.wire2api();
			let api_end = end.wire2api();
			let api_sequence = sequence.wire2api();
			let api_content_key = content_key.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_part = part.wire2api();
			move |task_callback| {
				file_upload_part_start(
					api_base_url,
					api_url_prefix,
					api_auth_token,
					api_jwt,
					api_session_id,
					api_end,
					api_sequence,
					api_content_key,
					api_sign_key,
					api_part,
				)
			}
		},
	)
}
fn wire_file_upload_part_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	url_prefix: impl Wire2Api<Option<String>> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	session_id: impl Wire2Api<String> + UnwindSafe,
	end: impl Wire2Api<bool> + UnwindSafe,
	sequence: impl Wire2Api<i32> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	sign_key: impl Wire2Api<Option<String>> + UnwindSafe,
	part: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
		WrapInfo {
			debug_name: "file_upload_part",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_url_prefix = url_prefix.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_session_id = session_id.wire2api();
			let api_end = end.wire2api();
			let api_sequence = sequence.wire2api();
			let api_content_key = content_key.wire2api();
			let api_sign_key = sign_key.wire2api();
			let api_part = part.wire2api();
			move |task_callback| {
				file_upload_part(
					api_base_url,
					api_url_prefix,
					api_auth_token,
					api_jwt,
					api_session_id,
					api_end,
					api_sequence,
					api_content_key,
					api_sign_key,
					api_part,
				)
			}
		},
	)
}
fn wire_file_file_name_update_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	file_id: impl Wire2Api<String> + UnwindSafe,
	content_key: impl Wire2Api<String> + UnwindSafe,
	file_name: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "file_file_name_update",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_file_id = file_id.wire2api();
			let api_content_key = content_key.wire2api();
			let api_file_name = file_name.wire2api();
			move |task_callback| {
				file_file_name_update(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_file_id,
					api_content_key,
					api_file_name,
				)
			}
		},
	)
}
fn wire_file_delete_file_impl(
	port_: MessagePort,
	base_url: impl Wire2Api<String> + UnwindSafe,
	auth_token: impl Wire2Api<String> + UnwindSafe,
	jwt: impl Wire2Api<String> + UnwindSafe,
	file_id: impl Wire2Api<String> + UnwindSafe,
	group_id: impl Wire2Api<Option<String>> + UnwindSafe,
	group_as_member: impl Wire2Api<Option<String>> + UnwindSafe,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
		WrapInfo {
			debug_name: "file_delete_file",
			port: Some(port_),
			mode: FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.wire2api();
			let api_auth_token = auth_token.wire2api();
			let api_jwt = jwt.wire2api();
			let api_file_id = file_id.wire2api();
			let api_group_id = group_id.wire2api();
			let api_group_as_member = group_as_member.wire2api();
			move |task_callback| {
				file_delete_file(
					api_base_url,
					api_auth_token,
					api_jwt,
					api_file_id,
					api_group_id,
					api_group_as_member,
				)
			}
		},
	)
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
	fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
	*mut S: Wire2Api<T>,
{
	fn wire2api(self) -> Option<T> {
		(!self.is_null()).then(|| self.wire2api())
	}
}

impl Wire2Api<bool> for bool {
	fn wire2api(self) -> bool {
		self
	}
}

impl Wire2Api<i32> for i32 {
	fn wire2api(self) -> i32 {
		self
	}
}

impl Wire2Api<u32> for u32 {
	fn wire2api(self) -> u32 {
		self
	}
}
impl Wire2Api<u64> for u64 {
	fn wire2api(self) -> u64 {
		self
	}
}
impl Wire2Api<u8> for u8 {
	fn wire2api(self) -> u8 {
		self
	}
}

// Section: impl IntoDart

impl support::IntoDart for BelongsToType {
	fn into_dart(self) -> support::DartAbi {
		match self {
			Self::Group => 0,
			Self::User => 1,
			Self::None => 2,
		}
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for BelongsToType {}
impl rust2dart::IntoIntoDart<BelongsToType> for BelongsToType {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for Claims {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.aud.into_into_dart().into_dart(),
			self.sub.into_into_dart().into_dart(),
			self.exp.into_into_dart().into_dart(),
			self.iat.into_into_dart().into_dart(),
			self.fresh.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for Claims {}
impl rust2dart::IntoIntoDart<Claims> for Claims {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for CryptoRawOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.head.into_into_dart().into_dart(), self.data.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for CryptoRawOutput {}
impl rust2dart::IntoIntoDart<CryptoRawOutput> for CryptoRawOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for DeviceKeyData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.private_key.into_into_dart().into_dart(),
			self.public_key.into_into_dart().into_dart(),
			self.sign_key.into_into_dart().into_dart(),
			self.verify_key.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
			self.exported_verify_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for DeviceKeyData {}
impl rust2dart::IntoIntoDart<DeviceKeyData> for DeviceKeyData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for EncryptedHead {
	fn into_dart(self) -> support::DartAbi {
		vec![self.id.into_into_dart().into_dart(), self.sign.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for EncryptedHead {}
impl rust2dart::IntoIntoDart<EncryptedHead> for EncryptedHead {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for FileData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.file_id.into_into_dart().into_dart(),
			self.master_key_id.into_into_dart().into_dart(),
			self.owner.into_into_dart().into_dart(),
			self.belongs_to.into_dart(),
			self.belongs_to_type.into_into_dart().into_dart(),
			self.encrypted_key.into_into_dart().into_dart(),
			self.encrypted_key_alg.into_into_dart().into_dart(),
			self.encrypted_file_name.into_dart(),
			self.part_list.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for FileData {}
impl rust2dart::IntoIntoDart<FileData> for FileData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for FileDoneRegister {
	fn into_dart(self) -> support::DartAbi {
		vec![self.file_id.into_into_dart().into_dart(), self.session_id.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for FileDoneRegister {}
impl rust2dart::IntoIntoDart<FileDoneRegister> for FileDoneRegister {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for FileDownloadResult {
	fn into_dart(self) -> support::DartAbi {
		vec![self.next_file_key.into_into_dart().into_dart(), self.file.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for FileDownloadResult {}
impl rust2dart::IntoIntoDart<FileDownloadResult> for FileDownloadResult {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for FilePartListItem {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.part_id.into_into_dart().into_dart(),
			self.sequence.into_into_dart().into_dart(),
			self.extern_storage.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for FilePartListItem {}
impl rust2dart::IntoIntoDart<FilePartListItem> for FilePartListItem {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for FilePrepareRegister {
	fn into_dart(self) -> support::DartAbi {
		vec![self.encrypted_file_name.into_dart(), self.server_input.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for FilePrepareRegister {}
impl rust2dart::IntoIntoDart<FilePrepareRegister> for FilePrepareRegister {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for FileRegisterOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.file_id.into_into_dart().into_dart(),
			self.session_id.into_into_dart().into_dart(),
			self.encrypted_file_name.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for FileRegisterOutput {}
impl rust2dart::IntoIntoDart<FileRegisterOutput> for FileRegisterOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GeneratedRegisterData {
	fn into_dart(self) -> support::DartAbi {
		vec![self.identifier.into_into_dart().into_dart(), self.password.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GeneratedRegisterData {}
impl rust2dart::IntoIntoDart<GeneratedRegisterData> for GeneratedRegisterData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupChildrenList {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.group_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.parent.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupChildrenList {}
impl rust2dart::IntoIntoDart<GroupChildrenList> for GroupChildrenList {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupDataCheckUpdateServerOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.key_update.into_into_dart().into_dart(), self.rank.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupDataCheckUpdateServerOutput {}
impl rust2dart::IntoIntoDart<GroupDataCheckUpdateServerOutput> for GroupDataCheckUpdateServerOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupInviteReqList {
	fn into_dart(self) -> support::DartAbi {
		vec![self.group_id.into_into_dart().into_dart(), self.time.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupInviteReqList {}
impl rust2dart::IntoIntoDart<GroupInviteReqList> for GroupInviteReqList {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupJoinReqList {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.user_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.user_type.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupJoinReqList {}
impl rust2dart::IntoIntoDart<GroupJoinReqList> for GroupJoinReqList {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupKeyData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.private_group_key.into_into_dart().into_dart(),
			self.public_group_key.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
			self.group_key.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.group_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupKeyData {}
impl rust2dart::IntoIntoDart<GroupKeyData> for GroupKeyData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupOutData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.group_id.into_into_dart().into_dart(),
			self.parent_group_id.into_dart(),
			self.rank.into_into_dart().into_dart(),
			self.key_update.into_into_dart().into_dart(),
			self.created_time.into_into_dart().into_dart(),
			self.joined_time.into_into_dart().into_dart(),
			self.keys.into_into_dart().into_dart(),
			self.hmac_keys.into_into_dart().into_dart(),
			self.sortable_keys.into_into_dart().into_dart(),
			self.access_by_group_as_member.into_dart(),
			self.access_by_parent_group.into_dart(),
			self.is_connected_group.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupOutData {}
impl rust2dart::IntoIntoDart<GroupOutData> for GroupOutData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupOutDataHmacKeys {
	fn into_dart(self) -> support::DartAbi {
		vec![self.group_key_id.into_into_dart().into_dart(), self.key_data.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupOutDataHmacKeys {}
impl rust2dart::IntoIntoDart<GroupOutDataHmacKeys> for GroupOutDataHmacKeys {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupOutDataKeys {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.private_key_id.into_into_dart().into_dart(),
			self.key_data.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupOutDataKeys {}
impl rust2dart::IntoIntoDart<GroupOutDataKeys> for GroupOutDataKeys {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupOutDataSortableKeys {
	fn into_dart(self) -> support::DartAbi {
		vec![self.group_key_id.into_into_dart().into_dart(), self.key_data.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupOutDataSortableKeys {}
impl rust2dart::IntoIntoDart<GroupOutDataSortableKeys> for GroupOutDataSortableKeys {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupPublicKeyData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.public_key.into_into_dart().into_dart(),
			self.public_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupPublicKeyData {}
impl rust2dart::IntoIntoDart<GroupPublicKeyData> for GroupPublicKeyData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for GroupUserListItem {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.user_id.into_into_dart().into_dart(),
			self.rank.into_into_dart().into_dart(),
			self.joined_time.into_into_dart().into_dart(),
			self.user_type.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for GroupUserListItem {}
impl rust2dart::IntoIntoDart<GroupUserListItem> for GroupUserListItem {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for KeyRotationGetOut {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.pre_group_key_id.into_into_dart().into_dart(),
			self.new_group_key_id.into_into_dart().into_dart(),
			self.encrypted_eph_key_key_id.into_into_dart().into_dart(),
			self.server_output.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for KeyRotationGetOut {}
impl rust2dart::IntoIntoDart<KeyRotationGetOut> for KeyRotationGetOut {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for KeyRotationInput {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.error.into_dart(),
			self.encrypted_ephemeral_key_by_group_key_and_public_key
				.into_into_dart()
				.into_dart(),
			self.encrypted_group_key_by_ephemeral
				.into_into_dart()
				.into_dart(),
			self.ephemeral_alg.into_into_dart().into_dart(),
			self.encrypted_eph_key_key_id.into_into_dart().into_dart(),
			self.previous_group_key_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.new_group_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for KeyRotationInput {}
impl rust2dart::IntoIntoDart<KeyRotationInput> for KeyRotationInput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for ListGroups {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.group_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.joined_time.into_into_dart().into_dart(),
			self.rank.into_into_dart().into_dart(),
			self.parent.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for ListGroups {}
impl rust2dart::IntoIntoDart<ListGroups> for ListGroups {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for NonRegisteredKeyOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.key.into_into_dart().into_dart(), self.encrypted_key.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for NonRegisteredKeyOutput {}
impl rust2dart::IntoIntoDart<NonRegisteredKeyOutput> for NonRegisteredKeyOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for OtpRecoveryKeysOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.keys.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for OtpRecoveryKeysOutput {}
impl rust2dart::IntoIntoDart<OtpRecoveryKeysOutput> for OtpRecoveryKeysOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for OtpRegister {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.secret.into_into_dart().into_dart(),
			self.alg.into_into_dart().into_dart(),
			self.recover.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for OtpRegister {}
impl rust2dart::IntoIntoDart<OtpRegister> for OtpRegister {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for OtpRegisterUrl {
	fn into_dart(self) -> support::DartAbi {
		vec![self.url.into_into_dart().into_dart(), self.recover.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for OtpRegisterUrl {}
impl rust2dart::IntoIntoDart<OtpRegisterUrl> for OtpRegisterUrl {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for PreRegisterDeviceData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.input.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for PreRegisterDeviceData {}
impl rust2dart::IntoIntoDart<PreRegisterDeviceData> for PreRegisterDeviceData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for PrepareLoginOtpOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.master_key.into_into_dart().into_dart(), self.auth_key.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for PrepareLoginOtpOutput {}
impl rust2dart::IntoIntoDart<PrepareLoginOtpOutput> for PrepareLoginOtpOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for RegisterDeviceData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.session_id.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for RegisterDeviceData {}
impl rust2dart::IntoIntoDart<RegisterDeviceData> for RegisterDeviceData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for SearchableCreateOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.hashes.into_into_dart().into_dart(),
			self.alg.into_into_dart().into_dart(),
			self.key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for SearchableCreateOutput {}
impl rust2dart::IntoIntoDart<SearchableCreateOutput> for SearchableCreateOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for SignHead {
	fn into_dart(self) -> support::DartAbi {
		vec![self.id.into_into_dart().into_dart(), self.alg.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for SignHead {}
impl rust2dart::IntoIntoDart<SignHead> for SignHead {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for SortableEncryptOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.number.into_into_dart().into_dart(),
			self.alg.into_into_dart().into_dart(),
			self.key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for SortableEncryptOutput {}
impl rust2dart::IntoIntoDart<SortableEncryptOutput> for SortableEncryptOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for UserData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.jwt.into_into_dart().into_dart(),
			self.user_id.into_into_dart().into_dart(),
			self.device_id.into_into_dart().into_dart(),
			self.refresh_token.into_into_dart().into_dart(),
			self.keys.into_into_dart().into_dart(),
			self.user_keys.into_into_dart().into_dart(),
			self.hmac_keys.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserData {}
impl rust2dart::IntoIntoDart<UserData> for UserData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for UserDeviceList {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.device_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.device_identifier.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserDeviceList {}
impl rust2dart::IntoIntoDart<UserDeviceList> for UserDeviceList {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for UserInitServerOutput {
	fn into_dart(self) -> support::DartAbi {
		vec![self.jwt.into_into_dart().into_dart(), self.invites.into_into_dart().into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserInitServerOutput {}
impl rust2dart::IntoIntoDart<UserInitServerOutput> for UserInitServerOutput {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for UserKeyData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.private_key.into_into_dart().into_dart(),
			self.public_key.into_into_dart().into_dart(),
			self.group_key.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.group_key_id.into_into_dart().into_dart(),
			self.sign_key.into_into_dart().into_dart(),
			self.verify_key.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
			self.exported_public_key_sig_key_id.into_dart(),
			self.exported_verify_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserKeyData {}
impl rust2dart::IntoIntoDart<UserKeyData> for UserKeyData {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for UserLoginOut {
	fn into_dart(self) -> support::DartAbi {
		vec![self.user_data.into_dart(), self.mfa.into_dart()].into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserLoginOut {}
impl rust2dart::IntoIntoDart<UserLoginOut> for UserLoginOut {
	fn into_into_dart(self) -> Self {
		self
	}
}

impl support::IntoDart for UserPublicKeyData {
	fn into_dart(self) -> support::DartAbi {
		vec![
			self.public_key.into_into_dart().into_dart(),
			self.public_key_id.into_into_dart().into_dart(),
			self.public_key_sig_key_id.into_dart(),
		]
		.into_dart()
	}
}
impl support::IntoDartExceptPrimitive for UserPublicKeyData {}
impl rust2dart::IntoIntoDart<UserPublicKeyData> for UserPublicKeyData {
	fn into_into_dart(self) -> Self {
		self
	}
}

// Section: executor

support::lazy_static! {
	pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
