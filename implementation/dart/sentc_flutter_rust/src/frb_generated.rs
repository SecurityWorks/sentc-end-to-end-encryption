// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
	non_camel_case_types,
	unused,
	non_snake_case,
	clippy::needless_return,
	clippy::redundant_closure_call,
	clippy::redundant_closure,
	clippy::useless_conversion,
	clippy::unit_arg,
	clippy::unused_unit,
	clippy::double_parens,
	clippy::let_and_return,
	clippy::too_many_arguments,
	clippy::match_single_binding,
	clippy::clone_on_copy,
	clippy::let_unit_value,
	clippy::deref_addrof,
	clippy::explicit_auto_deref,
	clippy::borrow_deref_ref,
	clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
	default_stream_sink_codec = DcoCodec,
	default_rust_opaque = RustOpaqueNom,
	default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -731342369;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__user__change_password_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
	old_password: impl CstDecode<String>,
	new_password: impl CstDecode<String>,
	mfa_token: impl CstDecode<Option<String>>,
	mfa_recovery: impl CstDecode<Option<bool>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "change_password",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			let api_old_password = old_password.cst_decode();
			let api_new_password = new_password.cst_decode();
			let api_mfa_token = mfa_token.cst_decode();
			let api_mfa_recovery = mfa_recovery.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::change_password(
							api_base_url,
							&api_auth_token,
							&api_user_identifier,
							&api_old_password,
							&api_new_password,
							api_mfa_token,
							api_mfa_recovery,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__check_user_identifier_available_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "check_user_identifier_available",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::user::check_user_identifier_available(api_base_url, &api_auth_token, &api_user_identifier).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__crypto__create_searchable_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<String>,
	full: impl CstDecode<bool>,
	limit: impl CstDecode<Option<u32>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "create_searchable",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			let api_full = full.cst_decode();
			let api_limit = limit.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::create_searchable(&api_key, &api_data, api_full, api_limit)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__create_searchable_raw_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<String>,
	full: impl CstDecode<bool>,
	limit: impl CstDecode<Option<u32>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "create_searchable_raw",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			let api_full = full.cst_decode();
			let api_limit = limit.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::create_searchable_raw(&api_key, &api_data, api_full, api_limit)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__decode_jwt_impl(jwt: impl CstDecode<String>) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decode_jwt",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_jwt = jwt.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::user::decode_jwt(api_jwt)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__crypto__decrypt_asymmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	encrypted_data: impl CstDecode<Vec<u8>>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_asymmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_encrypted_data = encrypted_data.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_asymmetric(&api_private_key, api_encrypted_data, api_verify_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_raw_asymmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	encrypted_data: impl CstDecode<Vec<u8>>,
	head: impl CstDecode<String>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_raw_asymmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_encrypted_data = encrypted_data.cst_decode();
			let api_head = head.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_raw_asymmetric(&api_private_key, api_encrypted_data, &api_head, api_verify_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_raw_symmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	encrypted_data: impl CstDecode<Vec<u8>>,
	head: impl CstDecode<String>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_raw_symmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_encrypted_data = encrypted_data.cst_decode();
			let api_head = head.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_raw_symmetric(&api_key, api_encrypted_data, &api_head, api_verify_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_string_asymmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	encrypted_data: impl CstDecode<String>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_string_asymmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_encrypted_data = encrypted_data.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_string_asymmetric(&api_private_key, &api_encrypted_data, api_verify_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_string_symmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	encrypted_data: impl CstDecode<String>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_string_symmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_encrypted_data = encrypted_data.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_string_symmetric(&api_key, &api_encrypted_data, api_verify_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_sym_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	master_key: impl CstDecode<String>,
	encrypted_symmetric_key_info: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_sym_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_master_key = master_key.cst_decode();
			let api_encrypted_symmetric_key_info = encrypted_symmetric_key_info.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_sym_key(&api_master_key, &api_encrypted_symmetric_key_info)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_sym_key_by_private_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	encrypted_symmetric_key_info: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_sym_key_by_private_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_encrypted_symmetric_key_info = encrypted_symmetric_key_info.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_sym_key_by_private_key(&api_private_key, &api_encrypted_symmetric_key_info)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__decrypt_symmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	encrypted_data: impl CstDecode<Vec<u8>>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "decrypt_symmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_encrypted_data = encrypted_data.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::decrypt_symmetric(&api_key, api_encrypted_data, api_verify_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__delete_device_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	fresh_jwt: impl CstDecode<String>,
	device_id: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "delete_device",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_fresh_jwt = fresh_jwt.cst_decode();
			let api_device_id = device_id.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::delete_device(api_base_url, &api_auth_token, &api_fresh_jwt, &api_device_id).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__delete_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	fresh_jwt: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "delete_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_fresh_jwt = fresh_jwt.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::delete_user(api_base_url, &api_auth_token, &api_fresh_jwt).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__crypto__deserialize_head_from_string_impl(port_: flutter_rust_bridge::for_generated::MessagePort, head: impl CstDecode<String>) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "deserialize_head_from_string",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_head = head.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::deserialize_head_from_string(&api_head)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__disable_otp_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "disable_otp",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::disable_otp(api_base_url, &api_auth_token, &api_jwt).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__done_check_user_identifier_available_impl(
	server_output: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "done_check_user_identifier_available",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::user::done_check_user_identifier_available(&api_server_output)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__crypto__done_fetch_sym_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	master_key: impl CstDecode<String>,
	server_out: impl CstDecode<String>,
	non_registered: impl CstDecode<bool>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "done_fetch_sym_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_master_key = master_key.cst_decode();
			let api_server_out = server_out.cst_decode();
			let api_non_registered = non_registered.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::done_fetch_sym_key(&api_master_key, &api_server_out, api_non_registered)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__done_fetch_sym_key_by_private_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	server_out: impl CstDecode<String>,
	non_registered: impl CstDecode<bool>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "done_fetch_sym_key_by_private_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_server_out = server_out.cst_decode();
			let api_non_registered = non_registered.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::done_fetch_sym_key_by_private_key(&api_private_key, &api_server_out, api_non_registered)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__done_fetch_user_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	server_output: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "done_fetch_user_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_server_output = server_output.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::done_fetch_user_key(&api_private_key, &api_server_output)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__done_register_impl(server_output: impl CstDecode<String>) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "done_register",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::user::done_register(&api_server_output)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__user__done_register_device_start_impl(
	server_output: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "done_register_device_start",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::user::done_register_device_start(&api_server_output)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__crypto__encrypt_asymmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	reply_public_key_data: impl CstDecode<String>,
	data: impl CstDecode<Vec<u8>>,
	sign_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "encrypt_asymmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key_data = reply_public_key_data.cst_decode();
			let api_data = data.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::encrypt_asymmetric(&api_reply_public_key_data, api_data, api_sign_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__encrypt_raw_asymmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	reply_public_key_data: impl CstDecode<String>,
	data: impl CstDecode<Vec<u8>>,
	sign_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "encrypt_raw_asymmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key_data = reply_public_key_data.cst_decode();
			let api_data = data.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::encrypt_raw_asymmetric(&api_reply_public_key_data, api_data, api_sign_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__encrypt_raw_symmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<Vec<u8>>,
	sign_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "encrypt_raw_symmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::encrypt_raw_symmetric(api_key, api_data, api_sign_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__encrypt_string_asymmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	reply_public_key_data: impl CstDecode<String>,
	data: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "encrypt_string_asymmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key_data = reply_public_key_data.cst_decode();
			let api_data = data.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::encrypt_string_asymmetric(&api_reply_public_key_data, &api_data, api_sign_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__encrypt_string_symmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "encrypt_string_symmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::encrypt_string_symmetric(&api_key, &api_data, api_sign_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__encrypt_symmetric_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<Vec<u8>>,
	sign_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "encrypt_symmetric",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::encrypt_symmetric(&api_key, api_data, api_sign_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__extract_user_data_impl(port_: flutter_rust_bridge::for_generated::MessagePort, data: impl CstDecode<String>) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "extract_user_data",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::extract_user_data(&api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__fetch_user_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	key_id: impl CstDecode<String>,
	private_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "fetch_user_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_key_id = key_id.cst_decode();
			let api_private_key = private_key.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::user::fetch_user_key(api_base_url, &api_auth_token, &api_jwt, &api_key_id, &api_private_key).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_delete_file_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	file_id: impl CstDecode<String>,
	group_id: impl CstDecode<Option<String>>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_delete_file",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_file_id = file_id.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_delete_file(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_file_id,
							api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_done_register_file_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	server_output: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_done_register_file",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::file::file_done_register_file(api_server_output)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__file__file_download_and_decrypt_file_part_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	url_prefix: impl CstDecode<Option<String>>,
	auth_token: impl CstDecode<String>,
	part_id: impl CstDecode<String>,
	content_key: impl CstDecode<String>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_download_and_decrypt_file_part",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_url_prefix = url_prefix.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_part_id = part_id.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_download_and_decrypt_file_part(
							api_base_url,
							api_url_prefix,
							&api_auth_token,
							&api_part_id,
							&api_content_key,
							api_verify_key_data,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_download_and_decrypt_file_part_start_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	url_prefix: impl CstDecode<Option<String>>,
	auth_token: impl CstDecode<String>,
	part_id: impl CstDecode<String>,
	content_key: impl CstDecode<String>,
	verify_key_data: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_download_and_decrypt_file_part_start",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_url_prefix = url_prefix.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_part_id = part_id.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_verify_key_data = verify_key_data.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_download_and_decrypt_file_part_start(
							api_base_url,
							api_url_prefix,
							&api_auth_token,
							&api_part_id,
							&api_content_key,
							api_verify_key_data,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_download_file_meta_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<Option<String>>,
	id: impl CstDecode<String>,
	group_id: impl CstDecode<Option<String>>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_download_file_meta",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_download_file_meta(
							api_base_url,
							&api_auth_token,
							api_jwt,
							&api_id,
							api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_download_part_list_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	file_id: impl CstDecode<String>,
	last_sequence: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_download_part_list",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_file_id = file_id.cst_decode();
			let api_last_sequence = last_sequence.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::file::file_download_part_list(api_base_url, &api_auth_token, &api_file_id, &api_last_sequence).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_file_name_update_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	file_id: impl CstDecode<String>,
	content_key: impl CstDecode<String>,
	file_name: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_file_name_update",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_file_id = file_id.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_file_name = file_name.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_file_name_update(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_file_id,
							&api_content_key,
							api_file_name,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_prepare_register_file_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	master_key_id: impl CstDecode<String>,
	content_key: impl CstDecode<String>,
	encrypted_content_key: impl CstDecode<String>,
	belongs_to_id: impl CstDecode<Option<String>>,
	belongs_to_type: impl CstDecode<String>,
	file_name: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_prepare_register_file",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_master_key_id = master_key_id.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_encrypted_content_key = encrypted_content_key.cst_decode();
			let api_belongs_to_id = belongs_to_id.cst_decode();
			let api_belongs_to_type = belongs_to_type.cst_decode();
			let api_file_name = file_name.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::file::file_prepare_register_file(
						api_master_key_id,
						&api_content_key,
						api_encrypted_content_key,
						api_belongs_to_id,
						&api_belongs_to_type,
						api_file_name,
					)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__file__file_register_file_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	master_key_id: impl CstDecode<String>,
	content_key: impl CstDecode<String>,
	encrypted_content_key: impl CstDecode<String>,
	belongs_to_id: impl CstDecode<Option<String>>,
	belongs_to_type: impl CstDecode<String>,
	file_name: impl CstDecode<Option<String>>,
	group_id: impl CstDecode<Option<String>>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_register_file",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_master_key_id = master_key_id.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_encrypted_content_key = encrypted_content_key.cst_decode();
			let api_belongs_to_id = belongs_to_id.cst_decode();
			let api_belongs_to_type = belongs_to_type.cst_decode();
			let api_file_name = file_name.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_register_file(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							api_master_key_id,
							&api_content_key,
							api_encrypted_content_key,
							api_belongs_to_id,
							&api_belongs_to_type,
							api_file_name,
							api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_upload_part_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	url_prefix: impl CstDecode<Option<String>>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	session_id: impl CstDecode<String>,
	end: impl CstDecode<bool>,
	sequence: impl CstDecode<i32>,
	content_key: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
	part: impl CstDecode<Vec<u8>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_upload_part",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_url_prefix = url_prefix.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_session_id = session_id.cst_decode();
			let api_end = end.cst_decode();
			let api_sequence = sequence.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_part = part.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_upload_part(
							api_base_url,
							api_url_prefix,
							&api_auth_token,
							&api_jwt,
							&api_session_id,
							api_end,
							api_sequence,
							&api_content_key,
							api_sign_key,
							api_part,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__file__file_upload_part_start_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	url_prefix: impl CstDecode<Option<String>>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	session_id: impl CstDecode<String>,
	end: impl CstDecode<bool>,
	sequence: impl CstDecode<i32>,
	content_key: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
	part: impl CstDecode<Vec<u8>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "file_upload_part_start",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_url_prefix = url_prefix.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_session_id = session_id.cst_decode();
			let api_end = end.cst_decode();
			let api_sequence = sequence.cst_decode();
			let api_content_key = content_key.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_part = part.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::file::file_upload_part_start(
							api_base_url,
							api_url_prefix,
							&api_auth_token,
							&api_jwt,
							&api_session_id,
							api_end,
							api_sequence,
							&api_content_key,
							api_sign_key,
							api_part,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__crypto__generate_non_register_sym_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	master_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "generate_non_register_sym_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_master_key = master_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::generate_non_register_sym_key(&api_master_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__generate_non_register_sym_key_by_public_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	reply_public_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "generate_non_register_sym_key_by_public_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_reply_public_key = reply_public_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::generate_non_register_sym_key_by_public_key(&api_reply_public_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__generate_user_register_data_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "generate_user_register_data",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::generate_user_register_data()?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__get_fresh_jwt_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
	password: impl CstDecode<String>,
	mfa_token: impl CstDecode<Option<String>>,
	mfa_recovery: impl CstDecode<Option<bool>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "get_fresh_jwt",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			let api_password = password.cst_decode();
			let api_mfa_token = mfa_token.cst_decode();
			let api_mfa_recovery = mfa_recovery.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::get_fresh_jwt(
							api_base_url,
							&api_auth_token,
							&api_user_identifier,
							&api_password,
							api_mfa_token,
							api_mfa_recovery,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__get_otp_recover_keys_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "get_otp_recover_keys",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::get_otp_recover_keys(api_base_url, &api_auth_token, &api_jwt).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__get_user_devices_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_id: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "get_user_devices",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_id = last_fetched_id.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::get_user_devices(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_last_fetched_time,
							&api_last_fetched_id,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_accept_invite_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_id: impl CstDecode<Option<String>>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_accept_invite",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_accept_invite(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_accept_join_req_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	user_id: impl CstDecode<String>,
	key_count: impl CstDecode<i32>,
	rank: impl CstDecode<Option<i32>>,
	admin_rank: impl CstDecode<i32>,
	user_public_key: impl CstDecode<String>,
	group_keys: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_accept_join_req",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_user_id = user_id.cst_decode();
			let api_key_count = key_count.cst_decode();
			let api_rank = rank.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_user_public_key = user_public_key.cst_decode();
			let api_group_keys = group_keys.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_accept_join_req(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_user_id,
							api_key_count,
							api_rank,
							api_admin_rank,
							&api_user_public_key,
							&api_group_keys,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_create_child_group_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	parent_public_key: impl CstDecode<String>,
	parent_id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	group_as_member: impl CstDecode<Option<String>>,
	sign_key: impl CstDecode<Option<String>>,
	starter: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_create_child_group",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_parent_public_key = parent_public_key.cst_decode();
			let api_parent_id = parent_id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_starter = starter.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_create_child_group(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_parent_public_key,
							&api_parent_id,
							api_admin_rank,
							api_group_as_member,
							api_sign_key,
							api_starter,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_create_connected_group_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	connected_group_id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	parent_public_key: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
	sign_key: impl CstDecode<Option<String>>,
	starter: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_create_connected_group",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_connected_group_id = connected_group_id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_parent_public_key = parent_public_key.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_starter = starter.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_create_connected_group(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_connected_group_id,
							api_admin_rank,
							&api_parent_public_key,
							api_group_as_member,
							api_sign_key,
							api_starter,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_create_group_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	creators_public_key: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
	sign_key: impl CstDecode<Option<String>>,
	starter: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_create_group",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_creators_public_key = creators_public_key.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_starter = starter.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_create_group(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_creators_public_key,
							api_group_as_member,
							api_sign_key,
							api_starter,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_decrypt_hmac_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	group_key: impl CstDecode<String>,
	server_key_data: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_decrypt_hmac_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_group_key = group_key.cst_decode();
			let api_server_key_data = server_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_decrypt_hmac_key(&api_group_key, &api_server_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_decrypt_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	server_key_data: impl CstDecode<String>,
	verify_key: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_decrypt_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_server_key_data = server_key_data.cst_decode();
			let api_verify_key = verify_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_decrypt_key(&api_private_key, &api_server_key_data, api_verify_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_decrypt_sortable_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	group_key: impl CstDecode<String>,
	server_key_data: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_decrypt_sortable_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_group_key = group_key.cst_decode();
			let api_server_key_data = server_key_data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_decrypt_sortable_key(&api_group_key, &api_server_key_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_delete_group_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_delete_group",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_delete_group(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_admin_rank,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_delete_sent_join_req_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	join_req_group_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_delete_sent_join_req",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_join_req_group_id = join_req_group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_delete_sent_join_req(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_admin_rank,
							&api_join_req_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_delete_sent_join_req_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	join_req_group_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_delete_sent_join_req_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_join_req_group_id = join_req_group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_delete_sent_join_req_user(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_join_req_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_done_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	private_key: impl CstDecode<String>,
	public_key: impl CstDecode<String>,
	pre_group_key: impl CstDecode<String>,
	server_output: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_done_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_private_key = private_key.cst_decode();
			let api_public_key = public_key.cst_decode();
			let api_pre_group_key = pre_group_key.cst_decode();
			let api_server_output = server_output.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_done_key_rotation(
						&api_private_key,
						&api_public_key,
						&api_pre_group_key,
						&api_server_output,
					)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_extract_group_data_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	server_output: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_extract_group_data",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_extract_group_data(&api_server_output)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_extract_group_keys_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	server_output: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_extract_group_keys",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_extract_group_keys(&api_server_output)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_finish_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	server_output: impl CstDecode<String>,
	pre_group_key: impl CstDecode<String>,
	public_key: impl CstDecode<String>,
	private_key: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_finish_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_server_output = server_output.cst_decode();
			let api_pre_group_key = pre_group_key.cst_decode();
			let api_public_key = public_key.cst_decode();
			let api_private_key = private_key.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_finish_key_rotation(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_server_output,
							&api_pre_group_key,
							&api_public_key,
							&api_private_key,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_all_first_level_children_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_group_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_all_first_level_children",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_group_id = last_fetched_group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_all_first_level_children(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_last_fetched_time,
							&api_last_fetched_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_done_key_rotation_server_input_impl(
	server_output: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_done_key_rotation_server_input",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::group::group_get_done_key_rotation_server_input(&api_server_output)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__group__group_get_group_data_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_group_data",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::group::group_get_group_data(api_base_url, &api_auth_token, &api_jwt, &api_id, api_group_as_member).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_group_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	key_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_group_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_key_id = key_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_group_key(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_key_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_group_keys_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_key_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_group_keys",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_key_id = last_fetched_key_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_group_keys(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_last_fetched_time,
							&api_last_fetched_key_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_group_updates_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_group_updates",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::group::group_get_group_updates(api_base_url, &api_auth_token, &api_jwt, &api_id, api_group_as_member).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_groups_for_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_group_id: impl CstDecode<String>,
	group_id: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_groups_for_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_group_id = last_fetched_group_id.cst_decode();
			let api_group_id = group_id.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_groups_for_user(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_last_fetched_time,
							&api_last_fetched_group_id,
							api_group_id,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_invites_for_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_group_id: impl CstDecode<String>,
	group_id: impl CstDecode<Option<String>>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_invites_for_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_group_id = last_fetched_group_id.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_invites_for_user(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_last_fetched_time,
							&api_last_fetched_group_id,
							api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_join_reqs_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_join_reqs",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_id = last_fetched_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_join_reqs(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_admin_rank,
							&api_last_fetched_time,
							&api_last_fetched_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_member_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_member",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_id = last_fetched_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_member(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_last_fetched_time,
							&api_last_fetched_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_public_key_data_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	id: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_public_key_data",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_id = id.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_public_key_data(api_base_url, &api_auth_token, &api_id).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_sent_join_req_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_group_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_sent_join_req",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_group_id = last_fetched_group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_sent_join_req(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_admin_rank,
							&api_last_fetched_time,
							&api_last_fetched_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_get_sent_join_req_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	last_fetched_time: impl CstDecode<String>,
	last_fetched_group_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_get_sent_join_req_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_last_fetched_time = last_fetched_time.cst_decode();
			let api_last_fetched_group_id = last_fetched_group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_get_sent_join_req_user(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_last_fetched_time,
							&api_last_fetched_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_invite_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	user_id: impl CstDecode<String>,
	key_count: impl CstDecode<i32>,
	rank: impl CstDecode<Option<i32>>,
	admin_rank: impl CstDecode<i32>,
	auto_invite: impl CstDecode<bool>,
	group_invite: impl CstDecode<bool>,
	re_invite: impl CstDecode<bool>,
	user_public_key: impl CstDecode<String>,
	group_keys: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_invite_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_user_id = user_id.cst_decode();
			let api_key_count = key_count.cst_decode();
			let api_rank = rank.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_auto_invite = auto_invite.cst_decode();
			let api_group_invite = group_invite.cst_decode();
			let api_re_invite = re_invite.cst_decode();
			let api_user_public_key = user_public_key.cst_decode();
			let api_group_keys = group_keys.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_invite_user(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_user_id,
							api_key_count,
							api_rank,
							api_admin_rank,
							api_auto_invite,
							api_group_invite,
							api_re_invite,
							&api_user_public_key,
							&api_group_keys,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_invite_user_session_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	auto_invite: impl CstDecode<bool>,
	session_id: impl CstDecode<String>,
	user_public_key: impl CstDecode<String>,
	group_keys: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_invite_user_session",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_auto_invite = auto_invite.cst_decode();
			let api_session_id = session_id.cst_decode();
			let api_user_public_key = user_public_key.cst_decode();
			let api_group_keys = group_keys.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_invite_user_session(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_auto_invite,
							&api_session_id,
							&api_user_public_key,
							&api_group_keys,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_join_req_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_join_req",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_join_req(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_join_user_session_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	session_id: impl CstDecode<String>,
	user_public_key: impl CstDecode<String>,
	group_keys: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_join_user_session",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_session_id = session_id.cst_decode();
			let api_user_public_key = user_public_key.cst_decode();
			let api_group_keys = group_keys.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_join_user_session(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_session_id,
							&api_user_public_key,
							&api_group_keys,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	public_key: impl CstDecode<String>,
	pre_group_key: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
	starter: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_public_key = public_key.cst_decode();
			let api_pre_group_key = pre_group_key.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_starter = starter.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_key_rotation(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_public_key,
							&api_pre_group_key,
							api_sign_key,
							api_starter,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_kick_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	user_id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_kick_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_user_id = user_id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_kick_user(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_user_id,
							api_admin_rank,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_pre_done_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_pre_done_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::group::group_pre_done_key_rotation(api_base_url, &api_auth_token, &api_jwt, &api_id, api_group_as_member)
								.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_prepare_create_group_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	creators_public_key: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
	starter: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_prepare_create_group",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_creators_public_key = creators_public_key.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_starter = starter.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_prepare_create_group(&api_creators_public_key, api_sign_key, api_starter)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_prepare_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	pre_group_key: impl CstDecode<String>,
	public_key: impl CstDecode<String>,
	sign_key: impl CstDecode<Option<String>>,
	starter: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_prepare_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_pre_group_key = pre_group_key.cst_decode();
			let api_public_key = public_key.cst_decode();
			let api_sign_key = sign_key.cst_decode();
			let api_starter = starter.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_prepare_key_rotation(&api_pre_group_key, &api_public_key, api_sign_key, api_starter)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_prepare_keys_for_new_member_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	user_public_key: impl CstDecode<String>,
	group_keys: impl CstDecode<String>,
	key_count: impl CstDecode<i32>,
	rank: impl CstDecode<Option<i32>>,
	admin_rank: impl CstDecode<i32>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_prepare_keys_for_new_member",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_user_public_key = user_public_key.cst_decode();
			let api_group_keys = group_keys.cst_decode();
			let api_key_count = key_count.cst_decode();
			let api_rank = rank.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::group::group_prepare_keys_for_new_member(
						&api_user_public_key,
						&api_group_keys,
						api_key_count,
						api_rank,
						api_admin_rank,
					)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__group__group_prepare_update_rank_impl(
	user_id: impl CstDecode<String>,
	rank: impl CstDecode<i32>,
	admin_rank: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_prepare_update_rank",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_user_id = user_id.cst_decode();
			let api_rank = rank.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::group::group_prepare_update_rank(&api_user_id, api_rank, api_admin_rank)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__group__group_reject_invite_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_id: impl CstDecode<Option<String>>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_reject_invite",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_id = group_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_reject_invite(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_group_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_reject_join_req_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	rejected_user_id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_reject_join_req",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_rejected_user_id = rejected_user_id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_reject_join_req(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_admin_rank,
							&api_rejected_user_id,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_stop_group_invites_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	admin_rank: impl CstDecode<i32>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_stop_group_invites",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_stop_group_invites(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							api_admin_rank,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__group_update_rank_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	user_id: impl CstDecode<String>,
	rank: impl CstDecode<i32>,
	admin_rank: impl CstDecode<i32>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "group_update_rank",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_user_id = user_id.cst_decode();
			let api_rank = rank.cst_decode();
			let api_admin_rank = admin_rank.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::group_update_rank(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_id,
							&api_user_id,
							api_rank,
							api_admin_rank,
							api_group_as_member,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__init_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	refresh_token: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "init_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_refresh_token = refresh_token.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::init_user(api_base_url, &api_auth_token, &api_jwt, api_refresh_token).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__group__leave_group_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	id: impl CstDecode<String>,
	group_as_member: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "leave_group",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_id = id.cst_decode();
			let api_group_as_member = group_as_member.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::group::leave_group(api_base_url, &api_auth_token, &api_jwt, &api_id, api_group_as_member).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__login_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
	password: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "login",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			let api_password = password.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::login(api_base_url, &api_auth_token, &api_user_identifier, &api_password).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__mfa_login_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	master_key_encryption: impl CstDecode<String>,
	auth_key: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
	token: impl CstDecode<String>,
	recovery: impl CstDecode<bool>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "mfa_login",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_master_key_encryption = master_key_encryption.cst_decode();
			let api_auth_key = auth_key.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			let api_token = token.cst_decode();
			let api_recovery = recovery.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::mfa_login(
							api_base_url,
							&api_auth_token,
							&api_master_key_encryption,
							api_auth_key,
							api_user_identifier,
							api_token,
							api_recovery,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__prepare_check_user_identifier_available_impl(
	user_identifier: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "prepare_check_user_identifier_available",
			port: None,
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
		},
		move || {
			let api_user_identifier = user_identifier.cst_decode();
			transform_result_dco::<_, _, String>((move || {
				let output_ok = crate::api::user::prepare_check_user_identifier_available(&api_user_identifier)?;
				Ok(output_ok)
			})())
		},
	)
}
fn wire__crate__api__user__prepare_register_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	user_identifier: impl CstDecode<String>,
	password: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "prepare_register",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_user_identifier = user_identifier.cst_decode();
			let api_password = password.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::prepare_register(&api_user_identifier, &api_password)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__prepare_register_device_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	server_output: impl CstDecode<String>,
	user_keys: impl CstDecode<String>,
	key_count: impl CstDecode<i32>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "prepare_register_device",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			let api_user_keys = user_keys.cst_decode();
			let api_key_count = key_count.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::prepare_register_device(&api_server_output, &api_user_keys, api_key_count)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__prepare_register_device_start_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	device_identifier: impl CstDecode<String>,
	password: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "prepare_register_device_start",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_device_identifier = device_identifier.cst_decode();
			let api_password = password.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::prepare_register_device_start(&api_device_identifier, &api_password)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__refresh_jwt_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	refresh_token: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "refresh_jwt",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_refresh_token = refresh_token.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::refresh_jwt(api_base_url, api_auth_token, &api_jwt, api_refresh_token).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__register_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
	password: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "register",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			let api_password = password.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::register(api_base_url, &api_auth_token, &api_user_identifier, &api_password).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__register_device_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	server_output: impl CstDecode<String>,
	key_count: impl CstDecode<i32>,
	user_keys: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "register_device",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_server_output = server_output.cst_decode();
			let api_key_count = key_count.cst_decode();
			let api_user_keys = user_keys.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::register_device(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_server_output,
							api_key_count,
							&api_user_keys,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__register_device_start_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	device_identifier: impl CstDecode<String>,
	password: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "register_device_start",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_device_identifier = device_identifier.cst_decode();
			let api_password = password.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::user::register_device_start(api_base_url, &api_auth_token, &api_device_identifier, &api_password).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__register_otp_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	issuer: impl CstDecode<String>,
	audience: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "register_otp",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_issuer = issuer.cst_decode();
			let api_audience = audience.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::register_otp(api_base_url, &api_auth_token, &api_jwt, &api_issuer, &api_audience).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__register_raw_otp_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "register_raw_otp",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::register_raw_otp(api_base_url, &api_auth_token, &api_jwt).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__reset_otp_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	issuer: impl CstDecode<String>,
	audience: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "reset_otp",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_issuer = issuer.cst_decode();
			let api_audience = audience.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::reset_otp(api_base_url, &api_auth_token, &api_jwt, &api_issuer, &api_audience).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__reset_password_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	new_password: impl CstDecode<String>,
	decrypted_private_key: impl CstDecode<String>,
	decrypted_sign_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "reset_password",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_new_password = new_password.cst_decode();
			let api_decrypted_private_key = decrypted_private_key.cst_decode();
			let api_decrypted_sign_key = decrypted_sign_key.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::reset_password(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_new_password,
							&api_decrypted_private_key,
							&api_decrypted_sign_key,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__reset_raw_otp_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "reset_raw_otp",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::reset_raw_otp(api_base_url, &api_auth_token, &api_jwt).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__crypto__search_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "search",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::search(&api_key, &api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__sortable_encrypt_number_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<u64>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "sortable_encrypt_number",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::sortable_encrypt_number(&api_key, api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__sortable_encrypt_raw_number_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<u64>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "sortable_encrypt_raw_number",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::sortable_encrypt_raw_number(&api_key, api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__sortable_encrypt_raw_string_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "sortable_encrypt_raw_string",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::sortable_encrypt_raw_string(&api_key, &api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__sortable_encrypt_string_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	key: impl CstDecode<String>,
	data: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "sortable_encrypt_string",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_key = key.cst_decode();
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::sortable_encrypt_string(&api_key, &api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__split_head_and_encrypted_data_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	data: impl CstDecode<Vec<u8>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "split_head_and_encrypted_data",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::split_head_and_encrypted_data(api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__crypto__split_head_and_encrypted_string_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	data: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "split_head_and_encrypted_string",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_data = data.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::crypto::split_head_and_encrypted_string(&api_data)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__update_user_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	user_identifier: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "update_user",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_user_identifier = user_identifier.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::update_user(api_base_url, &api_auth_token, &api_jwt, api_user_identifier).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_create_safety_number_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	verify_key_1: impl CstDecode<String>,
	user_id_1: impl CstDecode<String>,
	verify_key_2: impl CstDecode<Option<String>>,
	user_id_2: impl CstDecode<Option<String>>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_create_safety_number",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_verify_key_1 = verify_key_1.cst_decode();
			let api_user_id_1 = user_id_1.cst_decode();
			let api_verify_key_2 = verify_key_2.cst_decode();
			let api_user_id_2 = user_id_2.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::user_create_safety_number(&api_verify_key_1, &api_user_id_1, api_verify_key_2, api_user_id_2)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__user_device_key_session_upload_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	session_id: impl CstDecode<String>,
	user_public_key: impl CstDecode<String>,
	group_keys: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_device_key_session_upload",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_session_id = session_id.cst_decode();
			let api_user_public_key = user_public_key.cst_decode();
			let api_group_keys = group_keys.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::user_device_key_session_upload(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_session_id,
							&api_user_public_key,
							&api_group_keys,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_fetch_public_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_id: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_fetch_public_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_id = user_id.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::user_fetch_public_key(api_base_url, &api_auth_token, &api_user_id).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_fetch_verify_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	user_id: impl CstDecode<String>,
	verify_key_id: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_fetch_verify_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_user_id = user_id.cst_decode();
			let api_verify_key_id = verify_key_id.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok =
							crate::api::user::user_fetch_verify_key(api_base_url, &api_auth_token, &api_user_id, &api_verify_key_id).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_finish_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	server_output: impl CstDecode<String>,
	pre_group_key: impl CstDecode<String>,
	public_key: impl CstDecode<String>,
	private_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_finish_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_server_output = server_output.cst_decode();
			let api_pre_group_key = pre_group_key.cst_decode();
			let api_public_key = public_key.cst_decode();
			let api_private_key = private_key.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::user_finish_key_rotation(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_server_output,
							&api_pre_group_key,
							&api_public_key,
							&api_private_key,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_get_done_key_rotation_server_input_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	server_output: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_get_done_key_rotation_server_input",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_server_output = server_output.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::user_get_done_key_rotation_server_input(&api_server_output)?;
					Ok(output_ok)
				})())
			}
		},
	)
}
fn wire__crate__api__user__user_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
	public_device_key: impl CstDecode<String>,
	pre_user_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			let api_public_device_key = public_device_key.cst_decode();
			let api_pre_user_key = pre_user_key.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::user_key_rotation(
							api_base_url,
							&api_auth_token,
							&api_jwt,
							&api_public_device_key,
							&api_pre_user_key,
						)
						.await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_pre_done_key_rotation_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	base_url: impl CstDecode<String>,
	auth_token: impl CstDecode<String>,
	jwt: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_pre_done_key_rotation",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_base_url = base_url.cst_decode();
			let api_auth_token = auth_token.cst_decode();
			let api_jwt = jwt.cst_decode();
			move |context| async move {
				transform_result_dco::<_, _, String>(
					(move || async move {
						let output_ok = crate::api::user::user_pre_done_key_rotation(api_base_url, &api_auth_token, &api_jwt).await?;
						Ok(output_ok)
					})()
					.await,
				)
			}
		},
	)
}
fn wire__crate__api__user__user_verify_user_public_key_impl(
	port_: flutter_rust_bridge::for_generated::MessagePort,
	verify_key: impl CstDecode<String>,
	public_key: impl CstDecode<String>,
) {
	FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
		flutter_rust_bridge::for_generated::TaskInfo {
			debug_name: "user_verify_user_public_key",
			port: Some(port_),
			mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
		},
		move || {
			let api_verify_key = verify_key.cst_decode();
			let api_public_key = public_key.cst_decode();
			move |context| {
				transform_result_dco::<_, _, String>((move || {
					let output_ok = crate::api::user::user_verify_user_public_key(&api_verify_key, &api_public_key)?;
					Ok(output_ok)
				})())
			}
		},
	)
}

// Section: dart2rust

impl CstDecode<crate::api::file::BelongsToType> for i32 {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> crate::api::file::BelongsToType {
		match self {
			0 => crate::api::file::BelongsToType::Group,
			1 => crate::api::file::BelongsToType::User,
			2 => crate::api::file::BelongsToType::None,
			_ => unreachable!("Invalid variant for BelongsToType: {}", self),
		}
	}
}
impl CstDecode<bool> for bool {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> bool {
		self
	}
}
impl CstDecode<i32> for i32 {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> i32 {
		self
	}
}
impl CstDecode<u32> for u32 {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> u32 {
		self
	}
}
impl CstDecode<u64> for u64 {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> u64 {
		self
	}
}
impl CstDecode<u8> for u8 {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> u8 {
		self
	}
}
impl CstDecode<usize> for usize {
	// Codec=Cst (C-struct based), see doc to use other codecs
	fn cst_decode(self) -> usize {
		self
	}
}
impl SseDecode for String {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut inner = <Vec<u8>>::sse_decode(deserializer);
		return String::from_utf8(inner).unwrap();
	}
}

impl SseDecode for crate::api::file::BelongsToType {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut inner = <i32>::sse_decode(deserializer);
		return match inner {
			0 => crate::api::file::BelongsToType::Group,
			1 => crate::api::file::BelongsToType::User,
			2 => crate::api::file::BelongsToType::None,
			_ => unreachable!("Invalid variant for BelongsToType: {}", inner),
		};
	}
}

impl SseDecode for bool {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		deserializer.cursor.read_u8().unwrap() != 0
	}
}

impl SseDecode for crate::api::user::Claims {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_aud = <String>::sse_decode(deserializer);
		let mut var_sub = <String>::sse_decode(deserializer);
		let mut var_exp = <usize>::sse_decode(deserializer);
		let mut var_iat = <usize>::sse_decode(deserializer);
		let mut var_fresh = <bool>::sse_decode(deserializer);
		return crate::api::user::Claims {
			aud: var_aud,
			sub: var_sub,
			exp: var_exp,
			iat: var_iat,
			fresh: var_fresh,
		};
	}
}

impl SseDecode for crate::api::crypto::CryptoRawOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_head = <String>::sse_decode(deserializer);
		let mut var_data = <Vec<u8>>::sse_decode(deserializer);
		return crate::api::crypto::CryptoRawOutput {
			head: var_head,
			data: var_data,
		};
	}
}

impl SseDecode for crate::api::user::DeviceKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_privateKey = <String>::sse_decode(deserializer);
		let mut var_publicKey = <String>::sse_decode(deserializer);
		let mut var_signKey = <String>::sse_decode(deserializer);
		let mut var_verifyKey = <String>::sse_decode(deserializer);
		let mut var_exportedPublicKey = <String>::sse_decode(deserializer);
		let mut var_exportedVerifyKey = <String>::sse_decode(deserializer);
		return crate::api::user::DeviceKeyData {
			private_key: var_privateKey,
			public_key: var_publicKey,
			sign_key: var_signKey,
			verify_key: var_verifyKey,
			exported_public_key: var_exportedPublicKey,
			exported_verify_key: var_exportedVerifyKey,
		};
	}
}

impl SseDecode for crate::api::crypto::EncryptedHead {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_id = <String>::sse_decode(deserializer);
		let mut var_signId = <Option<String>>::sse_decode(deserializer);
		let mut var_signAlg = <Option<String>>::sse_decode(deserializer);
		return crate::api::crypto::EncryptedHead {
			id: var_id,
			sign_id: var_signId,
			sign_alg: var_signAlg,
		};
	}
}

impl SseDecode for crate::api::file::FileData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_fileId = <String>::sse_decode(deserializer);
		let mut var_masterKeyId = <String>::sse_decode(deserializer);
		let mut var_owner = <String>::sse_decode(deserializer);
		let mut var_belongsTo = <Option<String>>::sse_decode(deserializer);
		let mut var_belongsToType = <crate::api::file::BelongsToType>::sse_decode(deserializer);
		let mut var_encryptedKey = <String>::sse_decode(deserializer);
		let mut var_encryptedKeyAlg = <String>::sse_decode(deserializer);
		let mut var_encryptedFileName = <Option<String>>::sse_decode(deserializer);
		let mut var_partList = <Vec<crate::api::file::FilePartListItem>>::sse_decode(deserializer);
		return crate::api::file::FileData {
			file_id: var_fileId,
			master_key_id: var_masterKeyId,
			owner: var_owner,
			belongs_to: var_belongsTo,
			belongs_to_type: var_belongsToType,
			encrypted_key: var_encryptedKey,
			encrypted_key_alg: var_encryptedKeyAlg,
			encrypted_file_name: var_encryptedFileName,
			part_list: var_partList,
		};
	}
}

impl SseDecode for crate::api::file::FileDoneRegister {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_fileId = <String>::sse_decode(deserializer);
		let mut var_sessionId = <String>::sse_decode(deserializer);
		return crate::api::file::FileDoneRegister {
			file_id: var_fileId,
			session_id: var_sessionId,
		};
	}
}

impl SseDecode for crate::api::file::FileDownloadResult {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_nextFileKey = <String>::sse_decode(deserializer);
		let mut var_file = <Vec<u8>>::sse_decode(deserializer);
		return crate::api::file::FileDownloadResult {
			next_file_key: var_nextFileKey,
			file: var_file,
		};
	}
}

impl SseDecode for crate::api::file::FilePartListItem {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_partId = <String>::sse_decode(deserializer);
		let mut var_sequence = <i32>::sse_decode(deserializer);
		let mut var_externStorage = <bool>::sse_decode(deserializer);
		return crate::api::file::FilePartListItem {
			part_id: var_partId,
			sequence: var_sequence,
			extern_storage: var_externStorage,
		};
	}
}

impl SseDecode for crate::api::file::FilePrepareRegister {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_encryptedFileName = <Option<String>>::sse_decode(deserializer);
		let mut var_serverInput = <String>::sse_decode(deserializer);
		return crate::api::file::FilePrepareRegister {
			encrypted_file_name: var_encryptedFileName,
			server_input: var_serverInput,
		};
	}
}

impl SseDecode for crate::api::file::FileRegisterOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_fileId = <String>::sse_decode(deserializer);
		let mut var_sessionId = <String>::sse_decode(deserializer);
		let mut var_encryptedFileName = <Option<String>>::sse_decode(deserializer);
		return crate::api::file::FileRegisterOutput {
			file_id: var_fileId,
			session_id: var_sessionId,
			encrypted_file_name: var_encryptedFileName,
		};
	}
}

impl SseDecode for crate::api::user::GeneratedRegisterData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_identifier = <String>::sse_decode(deserializer);
		let mut var_password = <String>::sse_decode(deserializer);
		return crate::api::user::GeneratedRegisterData {
			identifier: var_identifier,
			password: var_password,
		};
	}
}

impl SseDecode for crate::api::group::GroupChildrenList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_groupId = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_parent = <Option<String>>::sse_decode(deserializer);
		return crate::api::group::GroupChildrenList {
			group_id: var_groupId,
			time: var_time,
			parent: var_parent,
		};
	}
}

impl SseDecode for crate::api::group::GroupDataCheckUpdateServerOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_keyUpdate = <bool>::sse_decode(deserializer);
		let mut var_rank = <i32>::sse_decode(deserializer);
		return crate::api::group::GroupDataCheckUpdateServerOutput {
			key_update: var_keyUpdate,
			rank: var_rank,
		};
	}
}

impl SseDecode for crate::api::group::GroupInviteReqList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_groupId = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		return crate::api::group::GroupInviteReqList {
			group_id: var_groupId,
			time: var_time,
		};
	}
}

impl SseDecode for crate::api::group::GroupJoinReqList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_userId = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_userType = <i32>::sse_decode(deserializer);
		return crate::api::group::GroupJoinReqList {
			user_id: var_userId,
			time: var_time,
			user_type: var_userType,
		};
	}
}

impl SseDecode for crate::api::group::GroupKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_privateGroupKey = <String>::sse_decode(deserializer);
		let mut var_publicGroupKey = <String>::sse_decode(deserializer);
		let mut var_exportedPublicKey = <String>::sse_decode(deserializer);
		let mut var_groupKey = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_groupKeyId = <String>::sse_decode(deserializer);
		return crate::api::group::GroupKeyData {
			private_group_key: var_privateGroupKey,
			public_group_key: var_publicGroupKey,
			exported_public_key: var_exportedPublicKey,
			group_key: var_groupKey,
			time: var_time,
			group_key_id: var_groupKeyId,
		};
	}
}

impl SseDecode for crate::api::group::GroupOutData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_groupId = <String>::sse_decode(deserializer);
		let mut var_parentGroupId = <Option<String>>::sse_decode(deserializer);
		let mut var_rank = <i32>::sse_decode(deserializer);
		let mut var_keyUpdate = <bool>::sse_decode(deserializer);
		let mut var_createdTime = <String>::sse_decode(deserializer);
		let mut var_joinedTime = <String>::sse_decode(deserializer);
		let mut var_keys = <Vec<crate::api::group::GroupOutDataKeys>>::sse_decode(deserializer);
		let mut var_hmacKeys = <Vec<crate::api::group::GroupOutDataHmacKeys>>::sse_decode(deserializer);
		let mut var_sortableKeys = <Vec<crate::api::group::GroupOutDataSortableKeys>>::sse_decode(deserializer);
		let mut var_accessByGroupAsMember = <Option<String>>::sse_decode(deserializer);
		let mut var_accessByParentGroup = <Option<String>>::sse_decode(deserializer);
		let mut var_isConnectedGroup = <bool>::sse_decode(deserializer);
		return crate::api::group::GroupOutData {
			group_id: var_groupId,
			parent_group_id: var_parentGroupId,
			rank: var_rank,
			key_update: var_keyUpdate,
			created_time: var_createdTime,
			joined_time: var_joinedTime,
			keys: var_keys,
			hmac_keys: var_hmacKeys,
			sortable_keys: var_sortableKeys,
			access_by_group_as_member: var_accessByGroupAsMember,
			access_by_parent_group: var_accessByParentGroup,
			is_connected_group: var_isConnectedGroup,
		};
	}
}

impl SseDecode for crate::api::group::GroupOutDataHmacKeys {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_groupKeyId = <String>::sse_decode(deserializer);
		let mut var_keyData = <String>::sse_decode(deserializer);
		return crate::api::group::GroupOutDataHmacKeys {
			group_key_id: var_groupKeyId,
			key_data: var_keyData,
		};
	}
}

impl SseDecode for crate::api::group::GroupOutDataKeys {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_privateKeyId = <String>::sse_decode(deserializer);
		let mut var_keyData = <String>::sse_decode(deserializer);
		let mut var_signedByUserId = <Option<String>>::sse_decode(deserializer);
		let mut var_signedByUserSignKeyId = <Option<String>>::sse_decode(deserializer);
		return crate::api::group::GroupOutDataKeys {
			private_key_id: var_privateKeyId,
			key_data: var_keyData,
			signed_by_user_id: var_signedByUserId,
			signed_by_user_sign_key_id: var_signedByUserSignKeyId,
		};
	}
}

impl SseDecode for crate::api::group::GroupOutDataSortableKeys {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_groupKeyId = <String>::sse_decode(deserializer);
		let mut var_keyData = <String>::sse_decode(deserializer);
		return crate::api::group::GroupOutDataSortableKeys {
			group_key_id: var_groupKeyId,
			key_data: var_keyData,
		};
	}
}

impl SseDecode for crate::api::group::GroupPublicKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_publicKey = <String>::sse_decode(deserializer);
		let mut var_publicKeyId = <String>::sse_decode(deserializer);
		return crate::api::group::GroupPublicKeyData {
			public_key: var_publicKey,
			public_key_id: var_publicKeyId,
		};
	}
}

impl SseDecode for crate::api::group::GroupUserListItem {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_userId = <String>::sse_decode(deserializer);
		let mut var_rank = <i32>::sse_decode(deserializer);
		let mut var_joinedTime = <String>::sse_decode(deserializer);
		let mut var_userType = <i32>::sse_decode(deserializer);
		return crate::api::group::GroupUserListItem {
			user_id: var_userId,
			rank: var_rank,
			joined_time: var_joinedTime,
			user_type: var_userType,
		};
	}
}

impl SseDecode for i32 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		deserializer.cursor.read_i32::<NativeEndian>().unwrap()
	}
}

impl SseDecode for crate::api::user::KeyRotationGetOut {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_preGroupKeyId = <String>::sse_decode(deserializer);
		let mut var_newGroupKeyId = <String>::sse_decode(deserializer);
		let mut var_encryptedEphKeyKeyId = <String>::sse_decode(deserializer);
		let mut var_serverOutput = <String>::sse_decode(deserializer);
		return crate::api::user::KeyRotationGetOut {
			pre_group_key_id: var_preGroupKeyId,
			new_group_key_id: var_newGroupKeyId,
			encrypted_eph_key_key_id: var_encryptedEphKeyKeyId,
			server_output: var_serverOutput,
		};
	}
}

impl SseDecode for crate::api::group::KeyRotationInput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_error = <Option<String>>::sse_decode(deserializer);
		let mut var_encryptedEphemeralKeyByGroupKeyAndPublicKey = <String>::sse_decode(deserializer);
		let mut var_encryptedGroupKeyByEphemeral = <String>::sse_decode(deserializer);
		let mut var_ephemeralAlg = <String>::sse_decode(deserializer);
		let mut var_encryptedEphKeyKeyId = <String>::sse_decode(deserializer);
		let mut var_previousGroupKeyId = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_newGroupKeyId = <String>::sse_decode(deserializer);
		return crate::api::group::KeyRotationInput {
			error: var_error,
			encrypted_ephemeral_key_by_group_key_and_public_key: var_encryptedEphemeralKeyByGroupKeyAndPublicKey,
			encrypted_group_key_by_ephemeral: var_encryptedGroupKeyByEphemeral,
			ephemeral_alg: var_ephemeralAlg,
			encrypted_eph_key_key_id: var_encryptedEphKeyKeyId,
			previous_group_key_id: var_previousGroupKeyId,
			time: var_time,
			new_group_key_id: var_newGroupKeyId,
		};
	}
}

impl SseDecode for Vec<String> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<String>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::file::FilePartListItem> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::file::FilePartListItem>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupChildrenList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupChildrenList>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupInviteReqList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupInviteReqList>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupJoinReqList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupJoinReqList>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupOutDataHmacKeys> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupOutDataHmacKeys>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupOutDataKeys> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupOutDataKeys>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupOutDataSortableKeys> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupOutDataSortableKeys>::sse_decode(
				deserializer,
			));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::GroupUserListItem> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::GroupUserListItem>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for crate::api::group::ListGroups {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_groupId = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_joinedTime = <String>::sse_decode(deserializer);
		let mut var_rank = <i32>::sse_decode(deserializer);
		let mut var_parent = <Option<String>>::sse_decode(deserializer);
		return crate::api::group::ListGroups {
			group_id: var_groupId,
			time: var_time,
			joined_time: var_joinedTime,
			rank: var_rank,
			parent: var_parent,
		};
	}
}

impl SseDecode for Vec<crate::api::user::KeyRotationGetOut> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::user::KeyRotationGetOut>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::group::ListGroups> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::group::ListGroups>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<u8> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<u8>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::user::UserDeviceList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::user::UserDeviceList>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for Vec<crate::api::user::UserKeyData> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut len_ = <i32>::sse_decode(deserializer);
		let mut ans_ = vec![];
		for idx_ in 0..len_ {
			ans_.push(<crate::api::user::UserKeyData>::sse_decode(deserializer));
		}
		return ans_;
	}
}

impl SseDecode for crate::api::crypto::NonRegisteredKeyOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_key = <String>::sse_decode(deserializer);
		let mut var_encryptedKey = <String>::sse_decode(deserializer);
		return crate::api::crypto::NonRegisteredKeyOutput {
			key: var_key,
			encrypted_key: var_encryptedKey,
		};
	}
}

impl SseDecode for Option<String> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		if (<bool>::sse_decode(deserializer)) {
			return Some(<String>::sse_decode(deserializer));
		} else {
			return None;
		}
	}
}

impl SseDecode for Option<bool> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		if (<bool>::sse_decode(deserializer)) {
			return Some(<bool>::sse_decode(deserializer));
		} else {
			return None;
		}
	}
}

impl SseDecode for Option<i32> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		if (<bool>::sse_decode(deserializer)) {
			return Some(<i32>::sse_decode(deserializer));
		} else {
			return None;
		}
	}
}

impl SseDecode for Option<u32> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		if (<bool>::sse_decode(deserializer)) {
			return Some(<u32>::sse_decode(deserializer));
		} else {
			return None;
		}
	}
}

impl SseDecode for crate::api::user::OtpRecoveryKeysOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_keys = <Vec<String>>::sse_decode(deserializer);
		return crate::api::user::OtpRecoveryKeysOutput { keys: var_keys };
	}
}

impl SseDecode for crate::api::user::OtpRegister {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_secret = <String>::sse_decode(deserializer);
		let mut var_alg = <String>::sse_decode(deserializer);
		let mut var_recover = <Vec<String>>::sse_decode(deserializer);
		return crate::api::user::OtpRegister {
			secret: var_secret,
			alg: var_alg,
			recover: var_recover,
		};
	}
}

impl SseDecode for crate::api::user::OtpRegisterUrl {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_url = <String>::sse_decode(deserializer);
		let mut var_recover = <Vec<String>>::sse_decode(deserializer);
		return crate::api::user::OtpRegisterUrl {
			url: var_url,
			recover: var_recover,
		};
	}
}

impl SseDecode for crate::api::user::PreRegisterDeviceData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_input = <String>::sse_decode(deserializer);
		let mut var_exportedPublicKey = <String>::sse_decode(deserializer);
		return crate::api::user::PreRegisterDeviceData {
			input: var_input,
			exported_public_key: var_exportedPublicKey,
		};
	}
}

impl SseDecode for crate::api::user::RegisterDeviceData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_sessionId = <String>::sse_decode(deserializer);
		let mut var_exportedPublicKey = <String>::sse_decode(deserializer);
		return crate::api::user::RegisterDeviceData {
			session_id: var_sessionId,
			exported_public_key: var_exportedPublicKey,
		};
	}
}

impl SseDecode for crate::api::crypto::SearchableCreateOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_hashes = <Vec<String>>::sse_decode(deserializer);
		let mut var_alg = <String>::sse_decode(deserializer);
		let mut var_keyId = <String>::sse_decode(deserializer);
		return crate::api::crypto::SearchableCreateOutput {
			hashes: var_hashes,
			alg: var_alg,
			key_id: var_keyId,
		};
	}
}

impl SseDecode for crate::api::crypto::SortableEncryptOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_number = <u64>::sse_decode(deserializer);
		let mut var_alg = <String>::sse_decode(deserializer);
		let mut var_keyId = <String>::sse_decode(deserializer);
		return crate::api::crypto::SortableEncryptOutput {
			number: var_number,
			alg: var_alg,
			key_id: var_keyId,
		};
	}
}

impl SseDecode for u32 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		deserializer.cursor.read_u32::<NativeEndian>().unwrap()
	}
}

impl SseDecode for u64 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		deserializer.cursor.read_u64::<NativeEndian>().unwrap()
	}
}

impl SseDecode for u8 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		deserializer.cursor.read_u8().unwrap()
	}
}

impl SseDecode for () {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::user::UserData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_jwt = <String>::sse_decode(deserializer);
		let mut var_userId = <String>::sse_decode(deserializer);
		let mut var_deviceId = <String>::sse_decode(deserializer);
		let mut var_refreshToken = <String>::sse_decode(deserializer);
		let mut var_keys = <crate::api::user::DeviceKeyData>::sse_decode(deserializer);
		let mut var_userKeys = <Vec<crate::api::user::UserKeyData>>::sse_decode(deserializer);
		let mut var_hmacKeys = <Vec<crate::api::group::GroupOutDataHmacKeys>>::sse_decode(deserializer);
		return crate::api::user::UserData {
			jwt: var_jwt,
			user_id: var_userId,
			device_id: var_deviceId,
			refresh_token: var_refreshToken,
			keys: var_keys,
			user_keys: var_userKeys,
			hmac_keys: var_hmacKeys,
		};
	}
}

impl SseDecode for crate::api::user::UserDeviceList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_deviceId = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_deviceIdentifier = <String>::sse_decode(deserializer);
		return crate::api::user::UserDeviceList {
			device_id: var_deviceId,
			time: var_time,
			device_identifier: var_deviceIdentifier,
		};
	}
}

impl SseDecode for crate::api::user::UserInitServerOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_jwt = <String>::sse_decode(deserializer);
		let mut var_invites = <Vec<crate::api::group::GroupInviteReqList>>::sse_decode(deserializer);
		return crate::api::user::UserInitServerOutput {
			jwt: var_jwt,
			invites: var_invites,
		};
	}
}

impl SseDecode for crate::api::user::UserKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_privateKey = <String>::sse_decode(deserializer);
		let mut var_publicKey = <String>::sse_decode(deserializer);
		let mut var_groupKey = <String>::sse_decode(deserializer);
		let mut var_time = <String>::sse_decode(deserializer);
		let mut var_groupKeyId = <String>::sse_decode(deserializer);
		let mut var_signKey = <String>::sse_decode(deserializer);
		let mut var_verifyKey = <String>::sse_decode(deserializer);
		let mut var_exportedPublicKey = <String>::sse_decode(deserializer);
		let mut var_exportedPublicKeySigKeyId = <Option<String>>::sse_decode(deserializer);
		let mut var_exportedVerifyKey = <String>::sse_decode(deserializer);
		return crate::api::user::UserKeyData {
			private_key: var_privateKey,
			public_key: var_publicKey,
			group_key: var_groupKey,
			time: var_time,
			group_key_id: var_groupKeyId,
			sign_key: var_signKey,
			verify_key: var_verifyKey,
			exported_public_key: var_exportedPublicKey,
			exported_public_key_sig_key_id: var_exportedPublicKeySigKeyId,
			exported_verify_key: var_exportedVerifyKey,
		};
	}
}

impl SseDecode for crate::api::user::UserLoginOut {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_direct = <Option<String>>::sse_decode(deserializer);
		let mut var_masterKey = <Option<String>>::sse_decode(deserializer);
		let mut var_authKey = <Option<String>>::sse_decode(deserializer);
		return crate::api::user::UserLoginOut {
			direct: var_direct,
			master_key: var_masterKey,
			auth_key: var_authKey,
		};
	}
}

impl SseDecode for crate::api::user::UserPublicKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		let mut var_publicKey = <String>::sse_decode(deserializer);
		let mut var_publicKeyId = <String>::sse_decode(deserializer);
		let mut var_publicKeySigKeyId = <Option<String>>::sse_decode(deserializer);
		return crate::api::user::UserPublicKeyData {
			public_key: var_publicKey,
			public_key_id: var_publicKeyId,
			public_key_sig_key_id: var_publicKeySigKeyId,
		};
	}
}

impl SseDecode for usize {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
		deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
	}
}

fn pde_ffi_dispatcher_primary_impl(
	func_id: i32,
	port: flutter_rust_bridge::for_generated::MessagePort,
	ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
	rust_vec_len: i32,
	data_len: i32,
) {
	// Codec=Pde (Serialization + dispatch), see doc to use other codecs
	match func_id {
		_ => unreachable!(),
	}
}

fn pde_ffi_dispatcher_sync_impl(
	func_id: i32,
	ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
	rust_vec_len: i32,
	data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
	// Codec=Pde (Serialization + dispatch), see doc to use other codecs
	match func_id {
		_ => unreachable!(),
	}
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::BelongsToType {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		match self {
			Self::Group => 0.into_dart(),
			Self::User => 1.into_dart(),
			Self::None => 2.into_dart(),
			_ => unreachable!(),
		}
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::BelongsToType {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::BelongsToType> for crate::api::file::BelongsToType {
	fn into_into_dart(self) -> crate::api::file::BelongsToType {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::Claims {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.aud.into_into_dart().into_dart(),
			self.sub.into_into_dart().into_dart(),
			self.exp.into_into_dart().into_dart(),
			self.iat.into_into_dart().into_dart(),
			self.fresh.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::Claims {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::Claims> for crate::api::user::Claims {
	fn into_into_dart(self) -> crate::api::user::Claims {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::crypto::CryptoRawOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.head.into_into_dart().into_dart(), self.data.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::crypto::CryptoRawOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::crypto::CryptoRawOutput> for crate::api::crypto::CryptoRawOutput {
	fn into_into_dart(self) -> crate::api::crypto::CryptoRawOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::DeviceKeyData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.private_key.into_into_dart().into_dart(),
			self.public_key.into_into_dart().into_dart(),
			self.sign_key.into_into_dart().into_dart(),
			self.verify_key.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
			self.exported_verify_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::DeviceKeyData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::DeviceKeyData> for crate::api::user::DeviceKeyData {
	fn into_into_dart(self) -> crate::api::user::DeviceKeyData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::crypto::EncryptedHead {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.id.into_into_dart().into_dart(),
			self.sign_id.into_into_dart().into_dart(),
			self.sign_alg.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::crypto::EncryptedHead {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::crypto::EncryptedHead> for crate::api::crypto::EncryptedHead {
	fn into_into_dart(self) -> crate::api::crypto::EncryptedHead {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::FileData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.file_id.into_into_dart().into_dart(),
			self.master_key_id.into_into_dart().into_dart(),
			self.owner.into_into_dart().into_dart(),
			self.belongs_to.into_into_dart().into_dart(),
			self.belongs_to_type.into_into_dart().into_dart(),
			self.encrypted_key.into_into_dart().into_dart(),
			self.encrypted_key_alg.into_into_dart().into_dart(),
			self.encrypted_file_name.into_into_dart().into_dart(),
			self.part_list.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::FileData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::FileData> for crate::api::file::FileData {
	fn into_into_dart(self) -> crate::api::file::FileData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::FileDoneRegister {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.file_id.into_into_dart().into_dart(), self.session_id.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::FileDoneRegister {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::FileDoneRegister> for crate::api::file::FileDoneRegister {
	fn into_into_dart(self) -> crate::api::file::FileDoneRegister {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::FileDownloadResult {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.next_file_key.into_into_dart().into_dart(), self.file.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::FileDownloadResult {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::FileDownloadResult> for crate::api::file::FileDownloadResult {
	fn into_into_dart(self) -> crate::api::file::FileDownloadResult {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::FilePartListItem {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.part_id.into_into_dart().into_dart(),
			self.sequence.into_into_dart().into_dart(),
			self.extern_storage.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::FilePartListItem {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::FilePartListItem> for crate::api::file::FilePartListItem {
	fn into_into_dart(self) -> crate::api::file::FilePartListItem {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::FilePrepareRegister {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.encrypted_file_name.into_into_dart().into_dart(),
			self.server_input.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::FilePrepareRegister {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::FilePrepareRegister> for crate::api::file::FilePrepareRegister {
	fn into_into_dart(self) -> crate::api::file::FilePrepareRegister {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::file::FileRegisterOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.file_id.into_into_dart().into_dart(),
			self.session_id.into_into_dart().into_dart(),
			self.encrypted_file_name.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::file::FileRegisterOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::file::FileRegisterOutput> for crate::api::file::FileRegisterOutput {
	fn into_into_dart(self) -> crate::api::file::FileRegisterOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::GeneratedRegisterData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.identifier.into_into_dart().into_dart(), self.password.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::GeneratedRegisterData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::GeneratedRegisterData> for crate::api::user::GeneratedRegisterData {
	fn into_into_dart(self) -> crate::api::user::GeneratedRegisterData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupChildrenList {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.group_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.parent.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupChildrenList {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupChildrenList> for crate::api::group::GroupChildrenList {
	fn into_into_dart(self) -> crate::api::group::GroupChildrenList {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupDataCheckUpdateServerOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.key_update.into_into_dart().into_dart(), self.rank.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupDataCheckUpdateServerOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupDataCheckUpdateServerOutput> for crate::api::group::GroupDataCheckUpdateServerOutput {
	fn into_into_dart(self) -> crate::api::group::GroupDataCheckUpdateServerOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupInviteReqList {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.group_id.into_into_dart().into_dart(), self.time.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupInviteReqList {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupInviteReqList> for crate::api::group::GroupInviteReqList {
	fn into_into_dart(self) -> crate::api::group::GroupInviteReqList {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupJoinReqList {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.user_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.user_type.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupJoinReqList {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupJoinReqList> for crate::api::group::GroupJoinReqList {
	fn into_into_dart(self) -> crate::api::group::GroupJoinReqList {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupKeyData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.private_group_key.into_into_dart().into_dart(),
			self.public_group_key.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
			self.group_key.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.group_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupKeyData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupKeyData> for crate::api::group::GroupKeyData {
	fn into_into_dart(self) -> crate::api::group::GroupKeyData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupOutData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.group_id.into_into_dart().into_dart(),
			self.parent_group_id.into_into_dart().into_dart(),
			self.rank.into_into_dart().into_dart(),
			self.key_update.into_into_dart().into_dart(),
			self.created_time.into_into_dart().into_dart(),
			self.joined_time.into_into_dart().into_dart(),
			self.keys.into_into_dart().into_dart(),
			self.hmac_keys.into_into_dart().into_dart(),
			self.sortable_keys.into_into_dart().into_dart(),
			self.access_by_group_as_member.into_into_dart().into_dart(),
			self.access_by_parent_group.into_into_dart().into_dart(),
			self.is_connected_group.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupOutData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupOutData> for crate::api::group::GroupOutData {
	fn into_into_dart(self) -> crate::api::group::GroupOutData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupOutDataHmacKeys {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.group_key_id.into_into_dart().into_dart(), self.key_data.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupOutDataHmacKeys {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupOutDataHmacKeys> for crate::api::group::GroupOutDataHmacKeys {
	fn into_into_dart(self) -> crate::api::group::GroupOutDataHmacKeys {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupOutDataKeys {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.private_key_id.into_into_dart().into_dart(),
			self.key_data.into_into_dart().into_dart(),
			self.signed_by_user_id.into_into_dart().into_dart(),
			self.signed_by_user_sign_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupOutDataKeys {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupOutDataKeys> for crate::api::group::GroupOutDataKeys {
	fn into_into_dart(self) -> crate::api::group::GroupOutDataKeys {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupOutDataSortableKeys {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.group_key_id.into_into_dart().into_dart(), self.key_data.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupOutDataSortableKeys {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupOutDataSortableKeys> for crate::api::group::GroupOutDataSortableKeys {
	fn into_into_dart(self) -> crate::api::group::GroupOutDataSortableKeys {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupPublicKeyData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.public_key.into_into_dart().into_dart(),
			self.public_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupPublicKeyData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupPublicKeyData> for crate::api::group::GroupPublicKeyData {
	fn into_into_dart(self) -> crate::api::group::GroupPublicKeyData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::GroupUserListItem {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.user_id.into_into_dart().into_dart(),
			self.rank.into_into_dart().into_dart(),
			self.joined_time.into_into_dart().into_dart(),
			self.user_type.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::GroupUserListItem {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::GroupUserListItem> for crate::api::group::GroupUserListItem {
	fn into_into_dart(self) -> crate::api::group::GroupUserListItem {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::KeyRotationGetOut {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.pre_group_key_id.into_into_dart().into_dart(),
			self.new_group_key_id.into_into_dart().into_dart(),
			self.encrypted_eph_key_key_id.into_into_dart().into_dart(),
			self.server_output.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::KeyRotationGetOut {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::KeyRotationGetOut> for crate::api::user::KeyRotationGetOut {
	fn into_into_dart(self) -> crate::api::user::KeyRotationGetOut {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::KeyRotationInput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.error.into_into_dart().into_dart(),
			self.encrypted_ephemeral_key_by_group_key_and_public_key
				.into_into_dart()
				.into_dart(),
			self.encrypted_group_key_by_ephemeral
				.into_into_dart()
				.into_dart(),
			self.ephemeral_alg.into_into_dart().into_dart(),
			self.encrypted_eph_key_key_id.into_into_dart().into_dart(),
			self.previous_group_key_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.new_group_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::KeyRotationInput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::KeyRotationInput> for crate::api::group::KeyRotationInput {
	fn into_into_dart(self) -> crate::api::group::KeyRotationInput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::group::ListGroups {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.group_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.joined_time.into_into_dart().into_dart(),
			self.rank.into_into_dart().into_dart(),
			self.parent.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::group::ListGroups {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::group::ListGroups> for crate::api::group::ListGroups {
	fn into_into_dart(self) -> crate::api::group::ListGroups {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::crypto::NonRegisteredKeyOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.key.into_into_dart().into_dart(), self.encrypted_key.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::crypto::NonRegisteredKeyOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::crypto::NonRegisteredKeyOutput> for crate::api::crypto::NonRegisteredKeyOutput {
	fn into_into_dart(self) -> crate::api::crypto::NonRegisteredKeyOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::OtpRecoveryKeysOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.keys.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::OtpRecoveryKeysOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::OtpRecoveryKeysOutput> for crate::api::user::OtpRecoveryKeysOutput {
	fn into_into_dart(self) -> crate::api::user::OtpRecoveryKeysOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::OtpRegister {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.secret.into_into_dart().into_dart(),
			self.alg.into_into_dart().into_dart(),
			self.recover.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::OtpRegister {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::OtpRegister> for crate::api::user::OtpRegister {
	fn into_into_dart(self) -> crate::api::user::OtpRegister {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::OtpRegisterUrl {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.url.into_into_dart().into_dart(), self.recover.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::OtpRegisterUrl {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::OtpRegisterUrl> for crate::api::user::OtpRegisterUrl {
	fn into_into_dart(self) -> crate::api::user::OtpRegisterUrl {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::PreRegisterDeviceData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.input.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::PreRegisterDeviceData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::PreRegisterDeviceData> for crate::api::user::PreRegisterDeviceData {
	fn into_into_dart(self) -> crate::api::user::PreRegisterDeviceData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::RegisterDeviceData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.session_id.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::RegisterDeviceData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::RegisterDeviceData> for crate::api::user::RegisterDeviceData {
	fn into_into_dart(self) -> crate::api::user::RegisterDeviceData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::crypto::SearchableCreateOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.hashes.into_into_dart().into_dart(),
			self.alg.into_into_dart().into_dart(),
			self.key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::crypto::SearchableCreateOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::crypto::SearchableCreateOutput> for crate::api::crypto::SearchableCreateOutput {
	fn into_into_dart(self) -> crate::api::crypto::SearchableCreateOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::crypto::SortableEncryptOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.number.into_into_dart().into_dart(),
			self.alg.into_into_dart().into_dart(),
			self.key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::crypto::SortableEncryptOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::crypto::SortableEncryptOutput> for crate::api::crypto::SortableEncryptOutput {
	fn into_into_dart(self) -> crate::api::crypto::SortableEncryptOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::UserData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.jwt.into_into_dart().into_dart(),
			self.user_id.into_into_dart().into_dart(),
			self.device_id.into_into_dart().into_dart(),
			self.refresh_token.into_into_dart().into_dart(),
			self.keys.into_into_dart().into_dart(),
			self.user_keys.into_into_dart().into_dart(),
			self.hmac_keys.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::UserData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::UserData> for crate::api::user::UserData {
	fn into_into_dart(self) -> crate::api::user::UserData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::UserDeviceList {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.device_id.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.device_identifier.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::UserDeviceList {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::UserDeviceList> for crate::api::user::UserDeviceList {
	fn into_into_dart(self) -> crate::api::user::UserDeviceList {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::UserInitServerOutput {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[self.jwt.into_into_dart().into_dart(), self.invites.into_into_dart().into_dart()].into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::UserInitServerOutput {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::UserInitServerOutput> for crate::api::user::UserInitServerOutput {
	fn into_into_dart(self) -> crate::api::user::UserInitServerOutput {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::UserKeyData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.private_key.into_into_dart().into_dart(),
			self.public_key.into_into_dart().into_dart(),
			self.group_key.into_into_dart().into_dart(),
			self.time.into_into_dart().into_dart(),
			self.group_key_id.into_into_dart().into_dart(),
			self.sign_key.into_into_dart().into_dart(),
			self.verify_key.into_into_dart().into_dart(),
			self.exported_public_key.into_into_dart().into_dart(),
			self.exported_public_key_sig_key_id
				.into_into_dart()
				.into_dart(),
			self.exported_verify_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::UserKeyData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::UserKeyData> for crate::api::user::UserKeyData {
	fn into_into_dart(self) -> crate::api::user::UserKeyData {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::UserLoginOut {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.direct.into_into_dart().into_dart(),
			self.master_key.into_into_dart().into_dart(),
			self.auth_key.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::UserLoginOut {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::UserLoginOut> for crate::api::user::UserLoginOut {
	fn into_into_dart(self) -> crate::api::user::UserLoginOut {
		self
	}
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::user::UserPublicKeyData {
	fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
		[
			self.public_key.into_into_dart().into_dart(),
			self.public_key_id.into_into_dart().into_dart(),
			self.public_key_sig_key_id.into_into_dart().into_dart(),
		]
		.into_dart()
	}
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::user::UserPublicKeyData {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::user::UserPublicKeyData> for crate::api::user::UserPublicKeyData {
	fn into_into_dart(self) -> crate::api::user::UserPublicKeyData {
		self
	}
}

impl SseEncode for String {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<Vec<u8>>::sse_encode(self.into_bytes(), serializer);
	}
}

impl SseEncode for crate::api::file::BelongsToType {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(
			match self {
				crate::api::file::BelongsToType::Group => 0,
				crate::api::file::BelongsToType::User => 1,
				crate::api::file::BelongsToType::None => 2,
				_ => {
					unimplemented!("");
				},
			},
			serializer,
		);
	}
}

impl SseEncode for bool {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		serializer.cursor.write_u8(self as _).unwrap();
	}
}

impl SseEncode for crate::api::user::Claims {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.aud, serializer);
		<String>::sse_encode(self.sub, serializer);
		<usize>::sse_encode(self.exp, serializer);
		<usize>::sse_encode(self.iat, serializer);
		<bool>::sse_encode(self.fresh, serializer);
	}
}

impl SseEncode for crate::api::crypto::CryptoRawOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.head, serializer);
		<Vec<u8>>::sse_encode(self.data, serializer);
	}
}

impl SseEncode for crate::api::user::DeviceKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.private_key, serializer);
		<String>::sse_encode(self.public_key, serializer);
		<String>::sse_encode(self.sign_key, serializer);
		<String>::sse_encode(self.verify_key, serializer);
		<String>::sse_encode(self.exported_public_key, serializer);
		<String>::sse_encode(self.exported_verify_key, serializer);
	}
}

impl SseEncode for crate::api::crypto::EncryptedHead {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.id, serializer);
		<Option<String>>::sse_encode(self.sign_id, serializer);
		<Option<String>>::sse_encode(self.sign_alg, serializer);
	}
}

impl SseEncode for crate::api::file::FileData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.file_id, serializer);
		<String>::sse_encode(self.master_key_id, serializer);
		<String>::sse_encode(self.owner, serializer);
		<Option<String>>::sse_encode(self.belongs_to, serializer);
		<crate::api::file::BelongsToType>::sse_encode(self.belongs_to_type, serializer);
		<String>::sse_encode(self.encrypted_key, serializer);
		<String>::sse_encode(self.encrypted_key_alg, serializer);
		<Option<String>>::sse_encode(self.encrypted_file_name, serializer);
		<Vec<crate::api::file::FilePartListItem>>::sse_encode(self.part_list, serializer);
	}
}

impl SseEncode for crate::api::file::FileDoneRegister {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.file_id, serializer);
		<String>::sse_encode(self.session_id, serializer);
	}
}

impl SseEncode for crate::api::file::FileDownloadResult {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.next_file_key, serializer);
		<Vec<u8>>::sse_encode(self.file, serializer);
	}
}

impl SseEncode for crate::api::file::FilePartListItem {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.part_id, serializer);
		<i32>::sse_encode(self.sequence, serializer);
		<bool>::sse_encode(self.extern_storage, serializer);
	}
}

impl SseEncode for crate::api::file::FilePrepareRegister {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<Option<String>>::sse_encode(self.encrypted_file_name, serializer);
		<String>::sse_encode(self.server_input, serializer);
	}
}

impl SseEncode for crate::api::file::FileRegisterOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.file_id, serializer);
		<String>::sse_encode(self.session_id, serializer);
		<Option<String>>::sse_encode(self.encrypted_file_name, serializer);
	}
}

impl SseEncode for crate::api::user::GeneratedRegisterData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.identifier, serializer);
		<String>::sse_encode(self.password, serializer);
	}
}

impl SseEncode for crate::api::group::GroupChildrenList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.group_id, serializer);
		<String>::sse_encode(self.time, serializer);
		<Option<String>>::sse_encode(self.parent, serializer);
	}
}

impl SseEncode for crate::api::group::GroupDataCheckUpdateServerOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<bool>::sse_encode(self.key_update, serializer);
		<i32>::sse_encode(self.rank, serializer);
	}
}

impl SseEncode for crate::api::group::GroupInviteReqList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.group_id, serializer);
		<String>::sse_encode(self.time, serializer);
	}
}

impl SseEncode for crate::api::group::GroupJoinReqList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.user_id, serializer);
		<String>::sse_encode(self.time, serializer);
		<i32>::sse_encode(self.user_type, serializer);
	}
}

impl SseEncode for crate::api::group::GroupKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.private_group_key, serializer);
		<String>::sse_encode(self.public_group_key, serializer);
		<String>::sse_encode(self.exported_public_key, serializer);
		<String>::sse_encode(self.group_key, serializer);
		<String>::sse_encode(self.time, serializer);
		<String>::sse_encode(self.group_key_id, serializer);
	}
}

impl SseEncode for crate::api::group::GroupOutData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.group_id, serializer);
		<Option<String>>::sse_encode(self.parent_group_id, serializer);
		<i32>::sse_encode(self.rank, serializer);
		<bool>::sse_encode(self.key_update, serializer);
		<String>::sse_encode(self.created_time, serializer);
		<String>::sse_encode(self.joined_time, serializer);
		<Vec<crate::api::group::GroupOutDataKeys>>::sse_encode(self.keys, serializer);
		<Vec<crate::api::group::GroupOutDataHmacKeys>>::sse_encode(self.hmac_keys, serializer);
		<Vec<crate::api::group::GroupOutDataSortableKeys>>::sse_encode(self.sortable_keys, serializer);
		<Option<String>>::sse_encode(self.access_by_group_as_member, serializer);
		<Option<String>>::sse_encode(self.access_by_parent_group, serializer);
		<bool>::sse_encode(self.is_connected_group, serializer);
	}
}

impl SseEncode for crate::api::group::GroupOutDataHmacKeys {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.group_key_id, serializer);
		<String>::sse_encode(self.key_data, serializer);
	}
}

impl SseEncode for crate::api::group::GroupOutDataKeys {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.private_key_id, serializer);
		<String>::sse_encode(self.key_data, serializer);
		<Option<String>>::sse_encode(self.signed_by_user_id, serializer);
		<Option<String>>::sse_encode(self.signed_by_user_sign_key_id, serializer);
	}
}

impl SseEncode for crate::api::group::GroupOutDataSortableKeys {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.group_key_id, serializer);
		<String>::sse_encode(self.key_data, serializer);
	}
}

impl SseEncode for crate::api::group::GroupPublicKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.public_key, serializer);
		<String>::sse_encode(self.public_key_id, serializer);
	}
}

impl SseEncode for crate::api::group::GroupUserListItem {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.user_id, serializer);
		<i32>::sse_encode(self.rank, serializer);
		<String>::sse_encode(self.joined_time, serializer);
		<i32>::sse_encode(self.user_type, serializer);
	}
}

impl SseEncode for i32 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
	}
}

impl SseEncode for crate::api::user::KeyRotationGetOut {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.pre_group_key_id, serializer);
		<String>::sse_encode(self.new_group_key_id, serializer);
		<String>::sse_encode(self.encrypted_eph_key_key_id, serializer);
		<String>::sse_encode(self.server_output, serializer);
	}
}

impl SseEncode for crate::api::group::KeyRotationInput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<Option<String>>::sse_encode(self.error, serializer);
		<String>::sse_encode(self.encrypted_ephemeral_key_by_group_key_and_public_key, serializer);
		<String>::sse_encode(self.encrypted_group_key_by_ephemeral, serializer);
		<String>::sse_encode(self.ephemeral_alg, serializer);
		<String>::sse_encode(self.encrypted_eph_key_key_id, serializer);
		<String>::sse_encode(self.previous_group_key_id, serializer);
		<String>::sse_encode(self.time, serializer);
		<String>::sse_encode(self.new_group_key_id, serializer);
	}
}

impl SseEncode for Vec<String> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<String>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::file::FilePartListItem> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::file::FilePartListItem>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupChildrenList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupChildrenList>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupInviteReqList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupInviteReqList>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupJoinReqList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupJoinReqList>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupOutDataHmacKeys> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupOutDataHmacKeys>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupOutDataKeys> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupOutDataKeys>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupOutDataSortableKeys> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupOutDataSortableKeys>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::GroupUserListItem> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::GroupUserListItem>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for crate::api::group::ListGroups {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.group_id, serializer);
		<String>::sse_encode(self.time, serializer);
		<String>::sse_encode(self.joined_time, serializer);
		<i32>::sse_encode(self.rank, serializer);
		<Option<String>>::sse_encode(self.parent, serializer);
	}
}

impl SseEncode for Vec<crate::api::user::KeyRotationGetOut> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::user::KeyRotationGetOut>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::group::ListGroups> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::group::ListGroups>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<u8> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<u8>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::user::UserDeviceList> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::user::UserDeviceList>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for Vec<crate::api::user::UserKeyData> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<i32>::sse_encode(self.len() as _, serializer);
		for item in self {
			<crate::api::user::UserKeyData>::sse_encode(item, serializer);
		}
	}
}

impl SseEncode for crate::api::crypto::NonRegisteredKeyOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.key, serializer);
		<String>::sse_encode(self.encrypted_key, serializer);
	}
}

impl SseEncode for Option<String> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<bool>::sse_encode(self.is_some(), serializer);
		if let Some(value) = self {
			<String>::sse_encode(value, serializer);
		}
	}
}

impl SseEncode for Option<bool> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<bool>::sse_encode(self.is_some(), serializer);
		if let Some(value) = self {
			<bool>::sse_encode(value, serializer);
		}
	}
}

impl SseEncode for Option<i32> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<bool>::sse_encode(self.is_some(), serializer);
		if let Some(value) = self {
			<i32>::sse_encode(value, serializer);
		}
	}
}

impl SseEncode for Option<u32> {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<bool>::sse_encode(self.is_some(), serializer);
		if let Some(value) = self {
			<u32>::sse_encode(value, serializer);
		}
	}
}

impl SseEncode for crate::api::user::OtpRecoveryKeysOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<Vec<String>>::sse_encode(self.keys, serializer);
	}
}

impl SseEncode for crate::api::user::OtpRegister {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.secret, serializer);
		<String>::sse_encode(self.alg, serializer);
		<Vec<String>>::sse_encode(self.recover, serializer);
	}
}

impl SseEncode for crate::api::user::OtpRegisterUrl {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.url, serializer);
		<Vec<String>>::sse_encode(self.recover, serializer);
	}
}

impl SseEncode for crate::api::user::PreRegisterDeviceData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.input, serializer);
		<String>::sse_encode(self.exported_public_key, serializer);
	}
}

impl SseEncode for crate::api::user::RegisterDeviceData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.session_id, serializer);
		<String>::sse_encode(self.exported_public_key, serializer);
	}
}

impl SseEncode for crate::api::crypto::SearchableCreateOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<Vec<String>>::sse_encode(self.hashes, serializer);
		<String>::sse_encode(self.alg, serializer);
		<String>::sse_encode(self.key_id, serializer);
	}
}

impl SseEncode for crate::api::crypto::SortableEncryptOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<u64>::sse_encode(self.number, serializer);
		<String>::sse_encode(self.alg, serializer);
		<String>::sse_encode(self.key_id, serializer);
	}
}

impl SseEncode for u32 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
	}
}

impl SseEncode for u64 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
	}
}

impl SseEncode for u8 {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		serializer.cursor.write_u8(self).unwrap();
	}
}

impl SseEncode for () {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::user::UserData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.jwt, serializer);
		<String>::sse_encode(self.user_id, serializer);
		<String>::sse_encode(self.device_id, serializer);
		<String>::sse_encode(self.refresh_token, serializer);
		<crate::api::user::DeviceKeyData>::sse_encode(self.keys, serializer);
		<Vec<crate::api::user::UserKeyData>>::sse_encode(self.user_keys, serializer);
		<Vec<crate::api::group::GroupOutDataHmacKeys>>::sse_encode(self.hmac_keys, serializer);
	}
}

impl SseEncode for crate::api::user::UserDeviceList {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.device_id, serializer);
		<String>::sse_encode(self.time, serializer);
		<String>::sse_encode(self.device_identifier, serializer);
	}
}

impl SseEncode for crate::api::user::UserInitServerOutput {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.jwt, serializer);
		<Vec<crate::api::group::GroupInviteReqList>>::sse_encode(self.invites, serializer);
	}
}

impl SseEncode for crate::api::user::UserKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.private_key, serializer);
		<String>::sse_encode(self.public_key, serializer);
		<String>::sse_encode(self.group_key, serializer);
		<String>::sse_encode(self.time, serializer);
		<String>::sse_encode(self.group_key_id, serializer);
		<String>::sse_encode(self.sign_key, serializer);
		<String>::sse_encode(self.verify_key, serializer);
		<String>::sse_encode(self.exported_public_key, serializer);
		<Option<String>>::sse_encode(self.exported_public_key_sig_key_id, serializer);
		<String>::sse_encode(self.exported_verify_key, serializer);
	}
}

impl SseEncode for crate::api::user::UserLoginOut {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<Option<String>>::sse_encode(self.direct, serializer);
		<Option<String>>::sse_encode(self.master_key, serializer);
		<Option<String>>::sse_encode(self.auth_key, serializer);
	}
}

impl SseEncode for crate::api::user::UserPublicKeyData {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		<String>::sse_encode(self.public_key, serializer);
		<String>::sse_encode(self.public_key_id, serializer);
		<Option<String>>::sse_encode(self.public_key_sig_key_id, serializer);
	}
}

impl SseEncode for usize {
	// Codec=Sse (Serialization based), see doc to use other codecs
	fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
		serializer
			.cursor
			.write_u64::<NativeEndian>(self as _)
			.unwrap();
	}
}

#[cfg(not(target_family = "wasm"))]
mod io {
	// This file is automatically generated, so please do not edit it.
	// @generated by `flutter_rust_bridge`@ 2.9.0.

	// Section: imports

	use super::*;
	use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
	use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
	use flutter_rust_bridge::{Handler, IntoIntoDart};

	// Section: boilerplate

	flutter_rust_bridge::frb_generated_boilerplate_io!();

	// Section: dart2rust

	impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> String {
			let vec: Vec<u8> = self.cst_decode();
			String::from_utf8(vec).unwrap()
		}
	}
	impl CstDecode<bool> for *mut bool {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> bool {
			unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
		}
	}
	impl CstDecode<i32> for *mut i32 {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> i32 {
			unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
		}
	}
	impl CstDecode<u32> for *mut u32 {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> u32 {
			unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
		}
	}
	impl CstDecode<crate::api::user::Claims> for wire_cst_claims {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::Claims {
			crate::api::user::Claims {
				aud: self.aud.cst_decode(),
				sub: self.sub.cst_decode(),
				exp: self.exp.cst_decode(),
				iat: self.iat.cst_decode(),
				fresh: self.fresh.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::CryptoRawOutput> for wire_cst_crypto_raw_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::CryptoRawOutput {
			crate::api::crypto::CryptoRawOutput {
				head: self.head.cst_decode(),
				data: self.data.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::DeviceKeyData> for wire_cst_device_key_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::DeviceKeyData {
			crate::api::user::DeviceKeyData {
				private_key: self.private_key.cst_decode(),
				public_key: self.public_key.cst_decode(),
				sign_key: self.sign_key.cst_decode(),
				verify_key: self.verify_key.cst_decode(),
				exported_public_key: self.exported_public_key.cst_decode(),
				exported_verify_key: self.exported_verify_key.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::EncryptedHead> for wire_cst_encrypted_head {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::EncryptedHead {
			crate::api::crypto::EncryptedHead {
				id: self.id.cst_decode(),
				sign_id: self.sign_id.cst_decode(),
				sign_alg: self.sign_alg.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileData> for wire_cst_file_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileData {
			crate::api::file::FileData {
				file_id: self.file_id.cst_decode(),
				master_key_id: self.master_key_id.cst_decode(),
				owner: self.owner.cst_decode(),
				belongs_to: self.belongs_to.cst_decode(),
				belongs_to_type: self.belongs_to_type.cst_decode(),
				encrypted_key: self.encrypted_key.cst_decode(),
				encrypted_key_alg: self.encrypted_key_alg.cst_decode(),
				encrypted_file_name: self.encrypted_file_name.cst_decode(),
				part_list: self.part_list.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileDoneRegister> for wire_cst_file_done_register {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileDoneRegister {
			crate::api::file::FileDoneRegister {
				file_id: self.file_id.cst_decode(),
				session_id: self.session_id.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileDownloadResult> for wire_cst_file_download_result {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileDownloadResult {
			crate::api::file::FileDownloadResult {
				next_file_key: self.next_file_key.cst_decode(),
				file: self.file.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FilePartListItem> for wire_cst_file_part_list_item {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FilePartListItem {
			crate::api::file::FilePartListItem {
				part_id: self.part_id.cst_decode(),
				sequence: self.sequence.cst_decode(),
				extern_storage: self.extern_storage.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FilePrepareRegister> for wire_cst_file_prepare_register {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FilePrepareRegister {
			crate::api::file::FilePrepareRegister {
				encrypted_file_name: self.encrypted_file_name.cst_decode(),
				server_input: self.server_input.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileRegisterOutput> for wire_cst_file_register_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileRegisterOutput {
			crate::api::file::FileRegisterOutput {
				file_id: self.file_id.cst_decode(),
				session_id: self.session_id.cst_decode(),
				encrypted_file_name: self.encrypted_file_name.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::GeneratedRegisterData> for wire_cst_generated_register_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::GeneratedRegisterData {
			crate::api::user::GeneratedRegisterData {
				identifier: self.identifier.cst_decode(),
				password: self.password.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupChildrenList> for wire_cst_group_children_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupChildrenList {
			crate::api::group::GroupChildrenList {
				group_id: self.group_id.cst_decode(),
				time: self.time.cst_decode(),
				parent: self.parent.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupDataCheckUpdateServerOutput> for wire_cst_group_data_check_update_server_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupDataCheckUpdateServerOutput {
			crate::api::group::GroupDataCheckUpdateServerOutput {
				key_update: self.key_update.cst_decode(),
				rank: self.rank.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupInviteReqList> for wire_cst_group_invite_req_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupInviteReqList {
			crate::api::group::GroupInviteReqList {
				group_id: self.group_id.cst_decode(),
				time: self.time.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupJoinReqList> for wire_cst_group_join_req_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupJoinReqList {
			crate::api::group::GroupJoinReqList {
				user_id: self.user_id.cst_decode(),
				time: self.time.cst_decode(),
				user_type: self.user_type.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupKeyData> for wire_cst_group_key_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupKeyData {
			crate::api::group::GroupKeyData {
				private_group_key: self.private_group_key.cst_decode(),
				public_group_key: self.public_group_key.cst_decode(),
				exported_public_key: self.exported_public_key.cst_decode(),
				group_key: self.group_key.cst_decode(),
				time: self.time.cst_decode(),
				group_key_id: self.group_key_id.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutData> for wire_cst_group_out_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutData {
			crate::api::group::GroupOutData {
				group_id: self.group_id.cst_decode(),
				parent_group_id: self.parent_group_id.cst_decode(),
				rank: self.rank.cst_decode(),
				key_update: self.key_update.cst_decode(),
				created_time: self.created_time.cst_decode(),
				joined_time: self.joined_time.cst_decode(),
				keys: self.keys.cst_decode(),
				hmac_keys: self.hmac_keys.cst_decode(),
				sortable_keys: self.sortable_keys.cst_decode(),
				access_by_group_as_member: self.access_by_group_as_member.cst_decode(),
				access_by_parent_group: self.access_by_parent_group.cst_decode(),
				is_connected_group: self.is_connected_group.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutDataHmacKeys> for wire_cst_group_out_data_hmac_keys {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutDataHmacKeys {
			crate::api::group::GroupOutDataHmacKeys {
				group_key_id: self.group_key_id.cst_decode(),
				key_data: self.key_data.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutDataKeys> for wire_cst_group_out_data_keys {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutDataKeys {
			crate::api::group::GroupOutDataKeys {
				private_key_id: self.private_key_id.cst_decode(),
				key_data: self.key_data.cst_decode(),
				signed_by_user_id: self.signed_by_user_id.cst_decode(),
				signed_by_user_sign_key_id: self.signed_by_user_sign_key_id.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutDataSortableKeys> for wire_cst_group_out_data_sortable_keys {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutDataSortableKeys {
			crate::api::group::GroupOutDataSortableKeys {
				group_key_id: self.group_key_id.cst_decode(),
				key_data: self.key_data.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupPublicKeyData> for wire_cst_group_public_key_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupPublicKeyData {
			crate::api::group::GroupPublicKeyData {
				public_key: self.public_key.cst_decode(),
				public_key_id: self.public_key_id.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupUserListItem> for wire_cst_group_user_list_item {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupUserListItem {
			crate::api::group::GroupUserListItem {
				user_id: self.user_id.cst_decode(),
				rank: self.rank.cst_decode(),
				joined_time: self.joined_time.cst_decode(),
				user_type: self.user_type.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::KeyRotationGetOut> for wire_cst_key_rotation_get_out {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::KeyRotationGetOut {
			crate::api::user::KeyRotationGetOut {
				pre_group_key_id: self.pre_group_key_id.cst_decode(),
				new_group_key_id: self.new_group_key_id.cst_decode(),
				encrypted_eph_key_key_id: self.encrypted_eph_key_key_id.cst_decode(),
				server_output: self.server_output.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::KeyRotationInput> for wire_cst_key_rotation_input {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::KeyRotationInput {
			crate::api::group::KeyRotationInput {
				error: self.error.cst_decode(),
				encrypted_ephemeral_key_by_group_key_and_public_key: self
					.encrypted_ephemeral_key_by_group_key_and_public_key
					.cst_decode(),
				encrypted_group_key_by_ephemeral: self.encrypted_group_key_by_ephemeral.cst_decode(),
				ephemeral_alg: self.ephemeral_alg.cst_decode(),
				encrypted_eph_key_key_id: self.encrypted_eph_key_key_id.cst_decode(),
				previous_group_key_id: self.previous_group_key_id.cst_decode(),
				time: self.time.cst_decode(),
				new_group_key_id: self.new_group_key_id.cst_decode(),
			}
		}
	}
	impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<String> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::file::FilePartListItem>> for *mut wire_cst_list_file_part_list_item {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::file::FilePartListItem> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupChildrenList>> for *mut wire_cst_list_group_children_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupChildrenList> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupInviteReqList>> for *mut wire_cst_list_group_invite_req_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupInviteReqList> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupJoinReqList>> for *mut wire_cst_list_group_join_req_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupJoinReqList> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupOutDataHmacKeys>> for *mut wire_cst_list_group_out_data_hmac_keys {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupOutDataHmacKeys> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupOutDataKeys>> for *mut wire_cst_list_group_out_data_keys {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupOutDataKeys> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupOutDataSortableKeys>> for *mut wire_cst_list_group_out_data_sortable_keys {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupOutDataSortableKeys> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupUserListItem>> for *mut wire_cst_list_group_user_list_item {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupUserListItem> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<crate::api::group::ListGroups> for wire_cst_list_groups {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::ListGroups {
			crate::api::group::ListGroups {
				group_id: self.group_id.cst_decode(),
				time: self.time.cst_decode(),
				joined_time: self.joined_time.cst_decode(),
				rank: self.rank.cst_decode(),
				parent: self.parent.cst_decode(),
			}
		}
	}
	impl CstDecode<Vec<crate::api::user::KeyRotationGetOut>> for *mut wire_cst_list_key_rotation_get_out {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::user::KeyRotationGetOut> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::ListGroups>> for *mut wire_cst_list_list_groups {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::ListGroups> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<u8> {
			unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			}
		}
	}
	impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<u8> {
			unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			}
		}
	}
	impl CstDecode<Vec<crate::api::user::UserDeviceList>> for *mut wire_cst_list_user_device_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::user::UserDeviceList> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<Vec<crate::api::user::UserKeyData>> for *mut wire_cst_list_user_key_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::user::UserKeyData> {
			let vec = unsafe {
				let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
				flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
			};
			vec.into_iter().map(CstDecode::cst_decode).collect()
		}
	}
	impl CstDecode<crate::api::crypto::NonRegisteredKeyOutput> for wire_cst_non_registered_key_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::NonRegisteredKeyOutput {
			crate::api::crypto::NonRegisteredKeyOutput {
				key: self.key.cst_decode(),
				encrypted_key: self.encrypted_key.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::OtpRecoveryKeysOutput> for wire_cst_otp_recovery_keys_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::OtpRecoveryKeysOutput {
			crate::api::user::OtpRecoveryKeysOutput {
				keys: self.keys.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::OtpRegister> for wire_cst_otp_register {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::OtpRegister {
			crate::api::user::OtpRegister {
				secret: self.secret.cst_decode(),
				alg: self.alg.cst_decode(),
				recover: self.recover.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::OtpRegisterUrl> for wire_cst_otp_register_url {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::OtpRegisterUrl {
			crate::api::user::OtpRegisterUrl {
				url: self.url.cst_decode(),
				recover: self.recover.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::PreRegisterDeviceData> for wire_cst_pre_register_device_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::PreRegisterDeviceData {
			crate::api::user::PreRegisterDeviceData {
				input: self.input.cst_decode(),
				exported_public_key: self.exported_public_key.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::RegisterDeviceData> for wire_cst_register_device_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::RegisterDeviceData {
			crate::api::user::RegisterDeviceData {
				session_id: self.session_id.cst_decode(),
				exported_public_key: self.exported_public_key.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::SearchableCreateOutput> for wire_cst_searchable_create_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::SearchableCreateOutput {
			crate::api::crypto::SearchableCreateOutput {
				hashes: self.hashes.cst_decode(),
				alg: self.alg.cst_decode(),
				key_id: self.key_id.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::SortableEncryptOutput> for wire_cst_sortable_encrypt_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::SortableEncryptOutput {
			crate::api::crypto::SortableEncryptOutput {
				number: self.number.cst_decode(),
				alg: self.alg.cst_decode(),
				key_id: self.key_id.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserData> for wire_cst_user_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserData {
			crate::api::user::UserData {
				jwt: self.jwt.cst_decode(),
				user_id: self.user_id.cst_decode(),
				device_id: self.device_id.cst_decode(),
				refresh_token: self.refresh_token.cst_decode(),
				keys: self.keys.cst_decode(),
				user_keys: self.user_keys.cst_decode(),
				hmac_keys: self.hmac_keys.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserDeviceList> for wire_cst_user_device_list {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserDeviceList {
			crate::api::user::UserDeviceList {
				device_id: self.device_id.cst_decode(),
				time: self.time.cst_decode(),
				device_identifier: self.device_identifier.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserInitServerOutput> for wire_cst_user_init_server_output {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserInitServerOutput {
			crate::api::user::UserInitServerOutput {
				jwt: self.jwt.cst_decode(),
				invites: self.invites.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserKeyData> for wire_cst_user_key_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserKeyData {
			crate::api::user::UserKeyData {
				private_key: self.private_key.cst_decode(),
				public_key: self.public_key.cst_decode(),
				group_key: self.group_key.cst_decode(),
				time: self.time.cst_decode(),
				group_key_id: self.group_key_id.cst_decode(),
				sign_key: self.sign_key.cst_decode(),
				verify_key: self.verify_key.cst_decode(),
				exported_public_key: self.exported_public_key.cst_decode(),
				exported_public_key_sig_key_id: self.exported_public_key_sig_key_id.cst_decode(),
				exported_verify_key: self.exported_verify_key.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserLoginOut> for wire_cst_user_login_out {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserLoginOut {
			crate::api::user::UserLoginOut {
				direct: self.direct.cst_decode(),
				master_key: self.master_key.cst_decode(),
				auth_key: self.auth_key.cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserPublicKeyData> for wire_cst_user_public_key_data {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserPublicKeyData {
			crate::api::user::UserPublicKeyData {
				public_key: self.public_key.cst_decode(),
				public_key_id: self.public_key_id.cst_decode(),
				public_key_sig_key_id: self.public_key_sig_key_id.cst_decode(),
			}
		}
	}
	impl NewWithNullPtr for wire_cst_claims {
		fn new_with_null_ptr() -> Self {
			Self {
				aud: core::ptr::null_mut(),
				sub: core::ptr::null_mut(),
				exp: Default::default(),
				iat: Default::default(),
				fresh: Default::default(),
			}
		}
	}
	impl Default for wire_cst_claims {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_crypto_raw_output {
		fn new_with_null_ptr() -> Self {
			Self {
				head: core::ptr::null_mut(),
				data: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_crypto_raw_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_device_key_data {
		fn new_with_null_ptr() -> Self {
			Self {
				private_key: core::ptr::null_mut(),
				public_key: core::ptr::null_mut(),
				sign_key: core::ptr::null_mut(),
				verify_key: core::ptr::null_mut(),
				exported_public_key: core::ptr::null_mut(),
				exported_verify_key: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_device_key_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_encrypted_head {
		fn new_with_null_ptr() -> Self {
			Self {
				id: core::ptr::null_mut(),
				sign_id: core::ptr::null_mut(),
				sign_alg: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_encrypted_head {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_file_data {
		fn new_with_null_ptr() -> Self {
			Self {
				file_id: core::ptr::null_mut(),
				master_key_id: core::ptr::null_mut(),
				owner: core::ptr::null_mut(),
				belongs_to: core::ptr::null_mut(),
				belongs_to_type: Default::default(),
				encrypted_key: core::ptr::null_mut(),
				encrypted_key_alg: core::ptr::null_mut(),
				encrypted_file_name: core::ptr::null_mut(),
				part_list: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_file_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_file_done_register {
		fn new_with_null_ptr() -> Self {
			Self {
				file_id: core::ptr::null_mut(),
				session_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_file_done_register {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_file_download_result {
		fn new_with_null_ptr() -> Self {
			Self {
				next_file_key: core::ptr::null_mut(),
				file: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_file_download_result {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_file_part_list_item {
		fn new_with_null_ptr() -> Self {
			Self {
				part_id: core::ptr::null_mut(),
				sequence: Default::default(),
				extern_storage: Default::default(),
			}
		}
	}
	impl Default for wire_cst_file_part_list_item {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_file_prepare_register {
		fn new_with_null_ptr() -> Self {
			Self {
				encrypted_file_name: core::ptr::null_mut(),
				server_input: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_file_prepare_register {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_file_register_output {
		fn new_with_null_ptr() -> Self {
			Self {
				file_id: core::ptr::null_mut(),
				session_id: core::ptr::null_mut(),
				encrypted_file_name: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_file_register_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_generated_register_data {
		fn new_with_null_ptr() -> Self {
			Self {
				identifier: core::ptr::null_mut(),
				password: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_generated_register_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_children_list {
		fn new_with_null_ptr() -> Self {
			Self {
				group_id: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				parent: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_children_list {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_data_check_update_server_output {
		fn new_with_null_ptr() -> Self {
			Self {
				key_update: Default::default(),
				rank: Default::default(),
			}
		}
	}
	impl Default for wire_cst_group_data_check_update_server_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_invite_req_list {
		fn new_with_null_ptr() -> Self {
			Self {
				group_id: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_invite_req_list {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_join_req_list {
		fn new_with_null_ptr() -> Self {
			Self {
				user_id: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				user_type: Default::default(),
			}
		}
	}
	impl Default for wire_cst_group_join_req_list {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_key_data {
		fn new_with_null_ptr() -> Self {
			Self {
				private_group_key: core::ptr::null_mut(),
				public_group_key: core::ptr::null_mut(),
				exported_public_key: core::ptr::null_mut(),
				group_key: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				group_key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_key_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_out_data {
		fn new_with_null_ptr() -> Self {
			Self {
				group_id: core::ptr::null_mut(),
				parent_group_id: core::ptr::null_mut(),
				rank: Default::default(),
				key_update: Default::default(),
				created_time: core::ptr::null_mut(),
				joined_time: core::ptr::null_mut(),
				keys: core::ptr::null_mut(),
				hmac_keys: core::ptr::null_mut(),
				sortable_keys: core::ptr::null_mut(),
				access_by_group_as_member: core::ptr::null_mut(),
				access_by_parent_group: core::ptr::null_mut(),
				is_connected_group: Default::default(),
			}
		}
	}
	impl Default for wire_cst_group_out_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_out_data_hmac_keys {
		fn new_with_null_ptr() -> Self {
			Self {
				group_key_id: core::ptr::null_mut(),
				key_data: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_out_data_hmac_keys {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_out_data_keys {
		fn new_with_null_ptr() -> Self {
			Self {
				private_key_id: core::ptr::null_mut(),
				key_data: core::ptr::null_mut(),
				signed_by_user_id: core::ptr::null_mut(),
				signed_by_user_sign_key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_out_data_keys {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_out_data_sortable_keys {
		fn new_with_null_ptr() -> Self {
			Self {
				group_key_id: core::ptr::null_mut(),
				key_data: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_out_data_sortable_keys {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_public_key_data {
		fn new_with_null_ptr() -> Self {
			Self {
				public_key: core::ptr::null_mut(),
				public_key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_group_public_key_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_group_user_list_item {
		fn new_with_null_ptr() -> Self {
			Self {
				user_id: core::ptr::null_mut(),
				rank: Default::default(),
				joined_time: core::ptr::null_mut(),
				user_type: Default::default(),
			}
		}
	}
	impl Default for wire_cst_group_user_list_item {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_key_rotation_get_out {
		fn new_with_null_ptr() -> Self {
			Self {
				pre_group_key_id: core::ptr::null_mut(),
				new_group_key_id: core::ptr::null_mut(),
				encrypted_eph_key_key_id: core::ptr::null_mut(),
				server_output: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_key_rotation_get_out {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_key_rotation_input {
		fn new_with_null_ptr() -> Self {
			Self {
				error: core::ptr::null_mut(),
				encrypted_ephemeral_key_by_group_key_and_public_key: core::ptr::null_mut(),
				encrypted_group_key_by_ephemeral: core::ptr::null_mut(),
				ephemeral_alg: core::ptr::null_mut(),
				encrypted_eph_key_key_id: core::ptr::null_mut(),
				previous_group_key_id: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				new_group_key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_key_rotation_input {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_list_groups {
		fn new_with_null_ptr() -> Self {
			Self {
				group_id: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				joined_time: core::ptr::null_mut(),
				rank: Default::default(),
				parent: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_list_groups {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_non_registered_key_output {
		fn new_with_null_ptr() -> Self {
			Self {
				key: core::ptr::null_mut(),
				encrypted_key: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_non_registered_key_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_otp_recovery_keys_output {
		fn new_with_null_ptr() -> Self {
			Self {
				keys: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_otp_recovery_keys_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_otp_register {
		fn new_with_null_ptr() -> Self {
			Self {
				secret: core::ptr::null_mut(),
				alg: core::ptr::null_mut(),
				recover: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_otp_register {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_otp_register_url {
		fn new_with_null_ptr() -> Self {
			Self {
				url: core::ptr::null_mut(),
				recover: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_otp_register_url {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_pre_register_device_data {
		fn new_with_null_ptr() -> Self {
			Self {
				input: core::ptr::null_mut(),
				exported_public_key: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_pre_register_device_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_register_device_data {
		fn new_with_null_ptr() -> Self {
			Self {
				session_id: core::ptr::null_mut(),
				exported_public_key: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_register_device_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_searchable_create_output {
		fn new_with_null_ptr() -> Self {
			Self {
				hashes: core::ptr::null_mut(),
				alg: core::ptr::null_mut(),
				key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_searchable_create_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_sortable_encrypt_output {
		fn new_with_null_ptr() -> Self {
			Self {
				number: Default::default(),
				alg: core::ptr::null_mut(),
				key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_sortable_encrypt_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_user_data {
		fn new_with_null_ptr() -> Self {
			Self {
				jwt: core::ptr::null_mut(),
				user_id: core::ptr::null_mut(),
				device_id: core::ptr::null_mut(),
				refresh_token: core::ptr::null_mut(),
				keys: Default::default(),
				user_keys: core::ptr::null_mut(),
				hmac_keys: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_user_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_user_device_list {
		fn new_with_null_ptr() -> Self {
			Self {
				device_id: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				device_identifier: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_user_device_list {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_user_init_server_output {
		fn new_with_null_ptr() -> Self {
			Self {
				jwt: core::ptr::null_mut(),
				invites: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_user_init_server_output {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_user_key_data {
		fn new_with_null_ptr() -> Self {
			Self {
				private_key: core::ptr::null_mut(),
				public_key: core::ptr::null_mut(),
				group_key: core::ptr::null_mut(),
				time: core::ptr::null_mut(),
				group_key_id: core::ptr::null_mut(),
				sign_key: core::ptr::null_mut(),
				verify_key: core::ptr::null_mut(),
				exported_public_key: core::ptr::null_mut(),
				exported_public_key_sig_key_id: core::ptr::null_mut(),
				exported_verify_key: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_user_key_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_user_login_out {
		fn new_with_null_ptr() -> Self {
			Self {
				direct: core::ptr::null_mut(),
				master_key: core::ptr::null_mut(),
				auth_key: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_user_login_out {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}
	impl NewWithNullPtr for wire_cst_user_public_key_data {
		fn new_with_null_ptr() -> Self {
			Self {
				public_key: core::ptr::null_mut(),
				public_key_id: core::ptr::null_mut(),
				public_key_sig_key_id: core::ptr::null_mut(),
			}
		}
	}
	impl Default for wire_cst_user_public_key_data {
		fn default() -> Self {
			Self::new_with_null_ptr()
		}
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__change_password(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
		old_password: *mut wire_cst_list_prim_u_8_strict,
		new_password: *mut wire_cst_list_prim_u_8_strict,
		mfa_token: *mut wire_cst_list_prim_u_8_strict,
		mfa_recovery: *mut bool,
	) {
		wire__crate__api__user__change_password_impl(
			port_,
			base_url,
			auth_token,
			user_identifier,
			old_password,
			new_password,
			mfa_token,
			mfa_recovery,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__check_user_identifier_available(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__check_user_identifier_available_impl(port_, base_url, auth_token, user_identifier)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__create_searchable(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
		full: bool,
		limit: *mut u32,
	) {
		wire__crate__api__crypto__create_searchable_impl(port_, key, data, full, limit)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__create_searchable_raw(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
		full: bool,
		limit: *mut u32,
	) {
		wire__crate__api__crypto__create_searchable_raw_impl(port_, key, data, full, limit)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__decode_jwt(
		jwt: *mut wire_cst_list_prim_u_8_strict,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__decode_jwt_impl(jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_asymmetric(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_data: *mut wire_cst_list_prim_u_8_loose,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_asymmetric_impl(port_, private_key, encrypted_data, verify_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_raw_asymmetric(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_data: *mut wire_cst_list_prim_u_8_loose,
		head: *mut wire_cst_list_prim_u_8_strict,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_raw_asymmetric_impl(port_, private_key, encrypted_data, head, verify_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_raw_symmetric(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_data: *mut wire_cst_list_prim_u_8_loose,
		head: *mut wire_cst_list_prim_u_8_strict,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_raw_symmetric_impl(port_, key, encrypted_data, head, verify_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_string_asymmetric(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_data: *mut wire_cst_list_prim_u_8_strict,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_string_asymmetric_impl(port_, private_key, encrypted_data, verify_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_string_symmetric(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_data: *mut wire_cst_list_prim_u_8_strict,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_string_symmetric_impl(port_, key, encrypted_data, verify_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_sym_key(
		port_: i64,
		master_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_symmetric_key_info: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_sym_key_impl(port_, master_key, encrypted_symmetric_key_info)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_sym_key_by_private_key(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_symmetric_key_info: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_sym_key_by_private_key_impl(port_, private_key, encrypted_symmetric_key_info)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__decrypt_symmetric(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_data: *mut wire_cst_list_prim_u_8_loose,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__decrypt_symmetric_impl(port_, key, encrypted_data, verify_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__delete_device(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		fresh_jwt: *mut wire_cst_list_prim_u_8_strict,
		device_id: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__delete_device_impl(port_, base_url, auth_token, fresh_jwt, device_id)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__delete_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		fresh_jwt: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__delete_user_impl(port_, base_url, auth_token, fresh_jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__deserialize_head_from_string(port_: i64, head: *mut wire_cst_list_prim_u_8_strict) {
		wire__crate__api__crypto__deserialize_head_from_string_impl(port_, head)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__disable_otp(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__disable_otp_impl(port_, base_url, auth_token, jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__done_check_user_identifier_available(
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__done_check_user_identifier_available_impl(server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__done_fetch_sym_key(
		port_: i64,
		master_key: *mut wire_cst_list_prim_u_8_strict,
		server_out: *mut wire_cst_list_prim_u_8_strict,
		non_registered: bool,
	) {
		wire__crate__api__crypto__done_fetch_sym_key_impl(port_, master_key, server_out, non_registered)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__done_fetch_sym_key_by_private_key(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		server_out: *mut wire_cst_list_prim_u_8_strict,
		non_registered: bool,
	) {
		wire__crate__api__crypto__done_fetch_sym_key_by_private_key_impl(port_, private_key, server_out, non_registered)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__done_fetch_user_key(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__done_fetch_user_key_impl(port_, private_key, server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__done_register(
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__done_register_impl(server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__done_register_device_start(
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__done_register_device_start_impl(server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__encrypt_asymmetric(
		port_: i64,
		reply_public_key_data: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_loose,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__encrypt_asymmetric_impl(port_, reply_public_key_data, data, sign_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__encrypt_raw_asymmetric(
		port_: i64,
		reply_public_key_data: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_loose,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__encrypt_raw_asymmetric_impl(port_, reply_public_key_data, data, sign_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__encrypt_raw_symmetric(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_loose,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__encrypt_raw_symmetric_impl(port_, key, data, sign_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__encrypt_string_asymmetric(
		port_: i64,
		reply_public_key_data: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__encrypt_string_asymmetric_impl(port_, reply_public_key_data, data, sign_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__encrypt_string_symmetric(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__encrypt_string_symmetric_impl(port_, key, data, sign_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__encrypt_symmetric(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_loose,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__encrypt_symmetric_impl(port_, key, data, sign_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__extract_user_data(port_: i64, data: *mut wire_cst_list_prim_u_8_strict) {
		wire__crate__api__user__extract_user_data_impl(port_, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__fetch_user_key(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		key_id: *mut wire_cst_list_prim_u_8_strict,
		private_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__fetch_user_key_impl(port_, base_url, auth_token, jwt, key_id, private_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_delete_file(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		file_id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_delete_file_impl(port_, base_url, auth_token, jwt, file_id, group_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_done_register_file(port_: i64, server_output: *mut wire_cst_list_prim_u_8_strict) {
		wire__crate__api__file__file_done_register_file_impl(port_, server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_download_and_decrypt_file_part(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		url_prefix: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		part_id: *mut wire_cst_list_prim_u_8_strict,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_download_and_decrypt_file_part_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			part_id,
			content_key,
			verify_key_data,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_download_and_decrypt_file_part_start(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		url_prefix: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		part_id: *mut wire_cst_list_prim_u_8_strict,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		verify_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_download_and_decrypt_file_part_start_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			part_id,
			content_key,
			verify_key_data,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_download_file_meta(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_download_file_meta_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_download_part_list(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		file_id: *mut wire_cst_list_prim_u_8_strict,
		last_sequence: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_download_part_list_impl(port_, base_url, auth_token, file_id, last_sequence)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_file_name_update(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		file_id: *mut wire_cst_list_prim_u_8_strict,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		file_name: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_file_name_update_impl(port_, base_url, auth_token, jwt, file_id, content_key, file_name)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_prepare_register_file(
		port_: i64,
		master_key_id: *mut wire_cst_list_prim_u_8_strict,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_content_key: *mut wire_cst_list_prim_u_8_strict,
		belongs_to_id: *mut wire_cst_list_prim_u_8_strict,
		belongs_to_type: *mut wire_cst_list_prim_u_8_strict,
		file_name: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_prepare_register_file_impl(
			port_,
			master_key_id,
			content_key,
			encrypted_content_key,
			belongs_to_id,
			belongs_to_type,
			file_name,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_register_file(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		master_key_id: *mut wire_cst_list_prim_u_8_strict,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_content_key: *mut wire_cst_list_prim_u_8_strict,
		belongs_to_id: *mut wire_cst_list_prim_u_8_strict,
		belongs_to_type: *mut wire_cst_list_prim_u_8_strict,
		file_name: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__file__file_register_file_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			master_key_id,
			content_key,
			encrypted_content_key,
			belongs_to_id,
			belongs_to_type,
			file_name,
			group_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_upload_part(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		url_prefix: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		session_id: *mut wire_cst_list_prim_u_8_strict,
		end: bool,
		sequence: i32,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		part: *mut wire_cst_list_prim_u_8_loose,
	) {
		wire__crate__api__file__file_upload_part_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			jwt,
			session_id,
			end,
			sequence,
			content_key,
			sign_key,
			part,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__file__file_upload_part_start(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		url_prefix: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		session_id: *mut wire_cst_list_prim_u_8_strict,
		end: bool,
		sequence: i32,
		content_key: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		part: *mut wire_cst_list_prim_u_8_loose,
	) {
		wire__crate__api__file__file_upload_part_start_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			jwt,
			session_id,
			end,
			sequence,
			content_key,
			sign_key,
			part,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__generate_non_register_sym_key(
		port_: i64,
		master_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__generate_non_register_sym_key_impl(port_, master_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__generate_non_register_sym_key_by_public_key(
		port_: i64,
		reply_public_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__generate_non_register_sym_key_by_public_key_impl(port_, reply_public_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__generate_user_register_data(port_: i64) {
		wire__crate__api__user__generate_user_register_data_impl(port_)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__get_fresh_jwt(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
		mfa_token: *mut wire_cst_list_prim_u_8_strict,
		mfa_recovery: *mut bool,
	) {
		wire__crate__api__user__get_fresh_jwt_impl(
			port_,
			base_url,
			auth_token,
			user_identifier,
			password,
			mfa_token,
			mfa_recovery,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__get_otp_recover_keys(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__get_otp_recover_keys_impl(port_, base_url, auth_token, jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__get_user_devices(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_id: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__get_user_devices_impl(port_, base_url, auth_token, jwt, last_fetched_time, last_fetched_id)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_accept_invite(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_accept_invite_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_accept_join_req(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
		key_count: i32,
		rank: *mut i32,
		admin_rank: i32,
		user_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_keys: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_accept_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			key_count,
			rank,
			admin_rank,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_create_child_group(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		parent_public_key: *mut wire_cst_list_prim_u_8_strict,
		parent_id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		starter: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_create_child_group_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			parent_public_key,
			parent_id,
			admin_rank,
			group_as_member,
			sign_key,
			starter,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_create_connected_group(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		connected_group_id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		parent_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		starter: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_create_connected_group_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			connected_group_id,
			admin_rank,
			parent_public_key,
			group_as_member,
			sign_key,
			starter,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_create_group(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		creators_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		starter: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_create_group_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			creators_public_key,
			group_as_member,
			sign_key,
			starter,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_decrypt_hmac_key(
		port_: i64,
		group_key: *mut wire_cst_list_prim_u_8_strict,
		server_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_decrypt_hmac_key_impl(port_, group_key, server_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_decrypt_key(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		server_key_data: *mut wire_cst_list_prim_u_8_strict,
		verify_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_decrypt_key_impl(port_, private_key, server_key_data, verify_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_decrypt_sortable_key(
		port_: i64,
		group_key: *mut wire_cst_list_prim_u_8_strict,
		server_key_data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_decrypt_sortable_key_impl(port_, group_key, server_key_data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_delete_group(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_delete_group_impl(port_, base_url, auth_token, jwt, id, admin_rank, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_delete_sent_join_req(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		join_req_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_delete_sent_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			join_req_group_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_delete_sent_join_req_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		join_req_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_delete_sent_join_req_user_impl(port_, base_url, auth_token, jwt, join_req_group_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_done_key_rotation(
		port_: i64,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		pre_group_key: *mut wire_cst_list_prim_u_8_strict,
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_done_key_rotation_impl(port_, private_key, public_key, pre_group_key, server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_extract_group_data(port_: i64, server_output: *mut wire_cst_list_prim_u_8_strict) {
		wire__crate__api__group__group_extract_group_data_impl(port_, server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_extract_group_keys(port_: i64, server_output: *mut wire_cst_list_prim_u_8_strict) {
		wire__crate__api__group__group_extract_group_keys_impl(port_, server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_finish_key_rotation(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		server_output: *mut wire_cst_list_prim_u_8_strict,
		pre_group_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		private_key: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_finish_key_rotation_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			server_output,
			pre_group_key,
			public_key,
			private_key,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_all_first_level_children(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_all_first_level_children_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			last_fetched_time,
			last_fetched_group_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_done_key_rotation_server_input(
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__group__group_get_done_key_rotation_server_input_impl(server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_group_data(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_group_data_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_group_key(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		key_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_group_key_impl(port_, base_url, auth_token, jwt, id, key_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_group_keys(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_key_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_group_keys_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			last_fetched_time,
			last_fetched_key_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_group_updates(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_group_updates_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_groups_for_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_groups_for_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			last_fetched_time,
			last_fetched_group_id,
			group_id,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_invites_for_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_invites_for_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			last_fetched_time,
			last_fetched_group_id,
			group_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_join_reqs(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_join_reqs_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			last_fetched_time,
			last_fetched_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_member(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_member_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			last_fetched_time,
			last_fetched_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_public_key_data(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_public_key_data_impl(port_, base_url, auth_token, id)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_sent_join_req(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_sent_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			last_fetched_time,
			last_fetched_group_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_get_sent_join_req_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_time: *mut wire_cst_list_prim_u_8_strict,
		last_fetched_group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_get_sent_join_req_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			last_fetched_time,
			last_fetched_group_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_invite_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
		key_count: i32,
		rank: *mut i32,
		admin_rank: i32,
		auto_invite: bool,
		group_invite: bool,
		re_invite: bool,
		user_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_keys: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_invite_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			key_count,
			rank,
			admin_rank,
			auto_invite,
			group_invite,
			re_invite,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_invite_user_session(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		auto_invite: bool,
		session_id: *mut wire_cst_list_prim_u_8_strict,
		user_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_keys: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_invite_user_session_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			auto_invite,
			session_id,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_join_req(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_join_req_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_join_user_session(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		session_id: *mut wire_cst_list_prim_u_8_strict,
		user_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_keys: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_join_user_session_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			session_id,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_key_rotation(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		pre_group_key: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		starter: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_key_rotation_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			public_key,
			pre_group_key,
			sign_key,
			starter,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_kick_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_kick_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			admin_rank,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_pre_done_key_rotation(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_pre_done_key_rotation_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_prepare_create_group(
		port_: i64,
		creators_public_key: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		starter: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_prepare_create_group_impl(port_, creators_public_key, sign_key, starter)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_prepare_key_rotation(
		port_: i64,
		pre_group_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		starter: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_prepare_key_rotation_impl(port_, pre_group_key, public_key, sign_key, starter)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_prepare_keys_for_new_member(
		port_: i64,
		user_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_keys: *mut wire_cst_list_prim_u_8_strict,
		key_count: i32,
		rank: *mut i32,
		admin_rank: i32,
	) {
		wire__crate__api__group__group_prepare_keys_for_new_member_impl(port_, user_public_key, group_keys, key_count, rank, admin_rank)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_prepare_update_rank(
		user_id: *mut wire_cst_list_prim_u_8_strict,
		rank: i32,
		admin_rank: i32,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__group__group_prepare_update_rank_impl(user_id, rank, admin_rank)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_reject_invite(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_reject_invite_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_reject_join_req(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		rejected_user_id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_reject_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			rejected_user_id,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_stop_group_invites(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		admin_rank: i32,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_stop_group_invites_impl(port_, base_url, auth_token, jwt, id, admin_rank, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__group_update_rank(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
		rank: i32,
		admin_rank: i32,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__group_update_rank_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			rank,
			admin_rank,
			group_as_member,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__init_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		refresh_token: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__init_user_impl(port_, base_url, auth_token, jwt, refresh_token)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__group__leave_group(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		id: *mut wire_cst_list_prim_u_8_strict,
		group_as_member: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__group__leave_group_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__login(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__login_impl(port_, base_url, auth_token, user_identifier, password)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__mfa_login(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		master_key_encryption: *mut wire_cst_list_prim_u_8_strict,
		auth_key: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
		token: *mut wire_cst_list_prim_u_8_strict,
		recovery: bool,
	) {
		wire__crate__api__user__mfa_login_impl(
			port_,
			base_url,
			auth_token,
			master_key_encryption,
			auth_key,
			user_identifier,
			token,
			recovery,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__prepare_check_user_identifier_available(
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__prepare_check_user_identifier_available_impl(user_identifier)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__prepare_register(
		port_: i64,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__prepare_register_impl(port_, user_identifier, password)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__prepare_register_device(
		port_: i64,
		server_output: *mut wire_cst_list_prim_u_8_strict,
		user_keys: *mut wire_cst_list_prim_u_8_strict,
		key_count: i32,
	) {
		wire__crate__api__user__prepare_register_device_impl(port_, server_output, user_keys, key_count)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__prepare_register_device_start(
		port_: i64,
		device_identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__prepare_register_device_start_impl(port_, device_identifier, password)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__refresh_jwt(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		refresh_token: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__refresh_jwt_impl(port_, base_url, auth_token, jwt, refresh_token)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__register(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__register_impl(port_, base_url, auth_token, user_identifier, password)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__register_device(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		server_output: *mut wire_cst_list_prim_u_8_strict,
		key_count: i32,
		user_keys: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__register_device_impl(port_, base_url, auth_token, jwt, server_output, key_count, user_keys)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__register_device_start(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		device_identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__register_device_start_impl(port_, base_url, auth_token, device_identifier, password)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__register_otp(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		issuer: *mut wire_cst_list_prim_u_8_strict,
		audience: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__register_otp_impl(port_, base_url, auth_token, jwt, issuer, audience)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__register_raw_otp(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__register_raw_otp_impl(port_, base_url, auth_token, jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__reset_otp(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		issuer: *mut wire_cst_list_prim_u_8_strict,
		audience: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__reset_otp_impl(port_, base_url, auth_token, jwt, issuer, audience)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__reset_password(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		new_password: *mut wire_cst_list_prim_u_8_strict,
		decrypted_private_key: *mut wire_cst_list_prim_u_8_strict,
		decrypted_sign_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__reset_password_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			new_password,
			decrypted_private_key,
			decrypted_sign_key,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__reset_raw_otp(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__reset_raw_otp_impl(port_, base_url, auth_token, jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__search(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__search_impl(port_, key, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__sortable_encrypt_number(port_: i64, key: *mut wire_cst_list_prim_u_8_strict, data: u64) {
		wire__crate__api__crypto__sortable_encrypt_number_impl(port_, key, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__sortable_encrypt_raw_number(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: u64,
	) {
		wire__crate__api__crypto__sortable_encrypt_raw_number_impl(port_, key, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__sortable_encrypt_raw_string(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__sortable_encrypt_raw_string_impl(port_, key, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__sortable_encrypt_string(
		port_: i64,
		key: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__crypto__sortable_encrypt_string_impl(port_, key, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__split_head_and_encrypted_data(port_: i64, data: *mut wire_cst_list_prim_u_8_loose) {
		wire__crate__api__crypto__split_head_and_encrypted_data_impl(port_, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__crypto__split_head_and_encrypted_string(port_: i64, data: *mut wire_cst_list_prim_u_8_strict) {
		wire__crate__api__crypto__split_head_and_encrypted_string_impl(port_, data)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__update_user(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		user_identifier: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__update_user_impl(port_, base_url, auth_token, jwt, user_identifier)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_create_safety_number(
		port_: i64,
		verify_key_1: *mut wire_cst_list_prim_u_8_strict,
		user_id_1: *mut wire_cst_list_prim_u_8_strict,
		verify_key_2: *mut wire_cst_list_prim_u_8_strict,
		user_id_2: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_create_safety_number_impl(port_, verify_key_1, user_id_1, verify_key_2, user_id_2)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_device_key_session_upload(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		session_id: *mut wire_cst_list_prim_u_8_strict,
		user_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_keys: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_device_key_session_upload_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			session_id,
			user_public_key,
			group_keys,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_fetch_public_key(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_fetch_public_key_impl(port_, base_url, auth_token, user_id)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_fetch_verify_key(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
		verify_key_id: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_fetch_verify_key_impl(port_, base_url, auth_token, user_id, verify_key_id)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_finish_key_rotation(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		server_output: *mut wire_cst_list_prim_u_8_strict,
		pre_group_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		private_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_finish_key_rotation_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			server_output,
			pre_group_key,
			public_key,
			private_key,
		)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_get_done_key_rotation_server_input(
		port_: i64,
		server_output: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_get_done_key_rotation_server_input_impl(port_, server_output)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_key_rotation(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
		public_device_key: *mut wire_cst_list_prim_u_8_strict,
		pre_user_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_key_rotation_impl(port_, base_url, auth_token, jwt, public_device_key, pre_user_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_pre_done_key_rotation(
		port_: i64,
		base_url: *mut wire_cst_list_prim_u_8_strict,
		auth_token: *mut wire_cst_list_prim_u_8_strict,
		jwt: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_pre_done_key_rotation_impl(port_, base_url, auth_token, jwt)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_wire__crate__api__user__user_verify_user_public_key(
		port_: i64,
		verify_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
	) {
		wire__crate__api__user__user_verify_user_public_key_impl(port_, verify_key, public_key)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
		flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
		flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
		flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
		let wrap = wire_cst_list_String {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_file_part_list_item(len: i32) -> *mut wire_cst_list_file_part_list_item {
		let wrap = wire_cst_list_file_part_list_item {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_file_part_list_item>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_children_list(len: i32) -> *mut wire_cst_list_group_children_list {
		let wrap = wire_cst_list_group_children_list {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_children_list>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_invite_req_list(len: i32) -> *mut wire_cst_list_group_invite_req_list {
		let wrap = wire_cst_list_group_invite_req_list {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_invite_req_list>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_join_req_list(len: i32) -> *mut wire_cst_list_group_join_req_list {
		let wrap = wire_cst_list_group_join_req_list {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_join_req_list>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_out_data_hmac_keys(len: i32) -> *mut wire_cst_list_group_out_data_hmac_keys {
		let wrap = wire_cst_list_group_out_data_hmac_keys {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_out_data_hmac_keys>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_out_data_keys(len: i32) -> *mut wire_cst_list_group_out_data_keys {
		let wrap = wire_cst_list_group_out_data_keys {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_out_data_keys>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_out_data_sortable_keys(len: i32) -> *mut wire_cst_list_group_out_data_sortable_keys {
		let wrap = wire_cst_list_group_out_data_sortable_keys {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_out_data_sortable_keys>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_group_user_list_item(len: i32) -> *mut wire_cst_list_group_user_list_item {
		let wrap = wire_cst_list_group_user_list_item {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_group_user_list_item>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_key_rotation_get_out(len: i32) -> *mut wire_cst_list_key_rotation_get_out {
		let wrap = wire_cst_list_key_rotation_get_out {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_key_rotation_get_out>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_list_groups(len: i32) -> *mut wire_cst_list_list_groups {
		let wrap = wire_cst_list_list_groups {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_list_groups>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_prim_u_8_loose(len: i32) -> *mut wire_cst_list_prim_u_8_loose {
		let ans = wire_cst_list_prim_u_8_loose {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_prim_u_8_strict(len: i32) -> *mut wire_cst_list_prim_u_8_strict {
		let ans = wire_cst_list_prim_u_8_strict {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_user_device_list(len: i32) -> *mut wire_cst_list_user_device_list {
		let wrap = wire_cst_list_user_device_list {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_user_device_list>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[unsafe(no_mangle)]
	pub extern "C" fn frbgen_sentc_cst_new_list_user_key_data(len: i32) -> *mut wire_cst_list_user_key_data {
		let wrap = wire_cst_list_user_key_data {
			ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(<wire_cst_user_key_data>::new_with_null_ptr(), len),
			len,
		};
		flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
	}

	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_claims {
		aud: *mut wire_cst_list_prim_u_8_strict,
		sub: *mut wire_cst_list_prim_u_8_strict,
		exp: usize,
		iat: usize,
		fresh: bool,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_crypto_raw_output {
		head: *mut wire_cst_list_prim_u_8_strict,
		data: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_device_key_data {
		private_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		verify_key: *mut wire_cst_list_prim_u_8_strict,
		exported_public_key: *mut wire_cst_list_prim_u_8_strict,
		exported_verify_key: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_encrypted_head {
		id: *mut wire_cst_list_prim_u_8_strict,
		sign_id: *mut wire_cst_list_prim_u_8_strict,
		sign_alg: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_file_data {
		file_id: *mut wire_cst_list_prim_u_8_strict,
		master_key_id: *mut wire_cst_list_prim_u_8_strict,
		owner: *mut wire_cst_list_prim_u_8_strict,
		belongs_to: *mut wire_cst_list_prim_u_8_strict,
		belongs_to_type: i32,
		encrypted_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_key_alg: *mut wire_cst_list_prim_u_8_strict,
		encrypted_file_name: *mut wire_cst_list_prim_u_8_strict,
		part_list: *mut wire_cst_list_file_part_list_item,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_file_done_register {
		file_id: *mut wire_cst_list_prim_u_8_strict,
		session_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_file_download_result {
		next_file_key: *mut wire_cst_list_prim_u_8_strict,
		file: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_file_part_list_item {
		part_id: *mut wire_cst_list_prim_u_8_strict,
		sequence: i32,
		extern_storage: bool,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_file_prepare_register {
		encrypted_file_name: *mut wire_cst_list_prim_u_8_strict,
		server_input: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_file_register_output {
		file_id: *mut wire_cst_list_prim_u_8_strict,
		session_id: *mut wire_cst_list_prim_u_8_strict,
		encrypted_file_name: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_generated_register_data {
		identifier: *mut wire_cst_list_prim_u_8_strict,
		password: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_children_list {
		group_id: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		parent: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_data_check_update_server_output {
		key_update: bool,
		rank: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_invite_req_list {
		group_id: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_join_req_list {
		user_id: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		user_type: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_key_data {
		private_group_key: *mut wire_cst_list_prim_u_8_strict,
		public_group_key: *mut wire_cst_list_prim_u_8_strict,
		exported_public_key: *mut wire_cst_list_prim_u_8_strict,
		group_key: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		group_key_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_out_data {
		group_id: *mut wire_cst_list_prim_u_8_strict,
		parent_group_id: *mut wire_cst_list_prim_u_8_strict,
		rank: i32,
		key_update: bool,
		created_time: *mut wire_cst_list_prim_u_8_strict,
		joined_time: *mut wire_cst_list_prim_u_8_strict,
		keys: *mut wire_cst_list_group_out_data_keys,
		hmac_keys: *mut wire_cst_list_group_out_data_hmac_keys,
		sortable_keys: *mut wire_cst_list_group_out_data_sortable_keys,
		access_by_group_as_member: *mut wire_cst_list_prim_u_8_strict,
		access_by_parent_group: *mut wire_cst_list_prim_u_8_strict,
		is_connected_group: bool,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_out_data_hmac_keys {
		group_key_id: *mut wire_cst_list_prim_u_8_strict,
		key_data: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_out_data_keys {
		private_key_id: *mut wire_cst_list_prim_u_8_strict,
		key_data: *mut wire_cst_list_prim_u_8_strict,
		signed_by_user_id: *mut wire_cst_list_prim_u_8_strict,
		signed_by_user_sign_key_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_out_data_sortable_keys {
		group_key_id: *mut wire_cst_list_prim_u_8_strict,
		key_data: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_public_key_data {
		public_key: *mut wire_cst_list_prim_u_8_strict,
		public_key_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_group_user_list_item {
		user_id: *mut wire_cst_list_prim_u_8_strict,
		rank: i32,
		joined_time: *mut wire_cst_list_prim_u_8_strict,
		user_type: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_key_rotation_get_out {
		pre_group_key_id: *mut wire_cst_list_prim_u_8_strict,
		new_group_key_id: *mut wire_cst_list_prim_u_8_strict,
		encrypted_eph_key_key_id: *mut wire_cst_list_prim_u_8_strict,
		server_output: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_key_rotation_input {
		error: *mut wire_cst_list_prim_u_8_strict,
		encrypted_ephemeral_key_by_group_key_and_public_key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_group_key_by_ephemeral: *mut wire_cst_list_prim_u_8_strict,
		ephemeral_alg: *mut wire_cst_list_prim_u_8_strict,
		encrypted_eph_key_key_id: *mut wire_cst_list_prim_u_8_strict,
		previous_group_key_id: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		new_group_key_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_String {
		ptr: *mut *mut wire_cst_list_prim_u_8_strict,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_file_part_list_item {
		ptr: *mut wire_cst_file_part_list_item,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_children_list {
		ptr: *mut wire_cst_group_children_list,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_invite_req_list {
		ptr: *mut wire_cst_group_invite_req_list,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_join_req_list {
		ptr: *mut wire_cst_group_join_req_list,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_out_data_hmac_keys {
		ptr: *mut wire_cst_group_out_data_hmac_keys,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_out_data_keys {
		ptr: *mut wire_cst_group_out_data_keys,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_out_data_sortable_keys {
		ptr: *mut wire_cst_group_out_data_sortable_keys,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_group_user_list_item {
		ptr: *mut wire_cst_group_user_list_item,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_groups {
		group_id: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		joined_time: *mut wire_cst_list_prim_u_8_strict,
		rank: i32,
		parent: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_key_rotation_get_out {
		ptr: *mut wire_cst_key_rotation_get_out,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_list_groups {
		ptr: *mut wire_cst_list_groups,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_prim_u_8_loose {
		ptr: *mut u8,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_prim_u_8_strict {
		ptr: *mut u8,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_user_device_list {
		ptr: *mut wire_cst_user_device_list,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_list_user_key_data {
		ptr: *mut wire_cst_user_key_data,
		len: i32,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_non_registered_key_output {
		key: *mut wire_cst_list_prim_u_8_strict,
		encrypted_key: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_otp_recovery_keys_output {
		keys: *mut wire_cst_list_String,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_otp_register {
		secret: *mut wire_cst_list_prim_u_8_strict,
		alg: *mut wire_cst_list_prim_u_8_strict,
		recover: *mut wire_cst_list_String,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_otp_register_url {
		url: *mut wire_cst_list_prim_u_8_strict,
		recover: *mut wire_cst_list_String,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_pre_register_device_data {
		input: *mut wire_cst_list_prim_u_8_strict,
		exported_public_key: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_register_device_data {
		session_id: *mut wire_cst_list_prim_u_8_strict,
		exported_public_key: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_searchable_create_output {
		hashes: *mut wire_cst_list_String,
		alg: *mut wire_cst_list_prim_u_8_strict,
		key_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_sortable_encrypt_output {
		number: u64,
		alg: *mut wire_cst_list_prim_u_8_strict,
		key_id: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_user_data {
		jwt: *mut wire_cst_list_prim_u_8_strict,
		user_id: *mut wire_cst_list_prim_u_8_strict,
		device_id: *mut wire_cst_list_prim_u_8_strict,
		refresh_token: *mut wire_cst_list_prim_u_8_strict,
		keys: wire_cst_device_key_data,
		user_keys: *mut wire_cst_list_user_key_data,
		hmac_keys: *mut wire_cst_list_group_out_data_hmac_keys,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_user_device_list {
		device_id: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		device_identifier: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_user_init_server_output {
		jwt: *mut wire_cst_list_prim_u_8_strict,
		invites: *mut wire_cst_list_group_invite_req_list,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_user_key_data {
		private_key: *mut wire_cst_list_prim_u_8_strict,
		public_key: *mut wire_cst_list_prim_u_8_strict,
		group_key: *mut wire_cst_list_prim_u_8_strict,
		time: *mut wire_cst_list_prim_u_8_strict,
		group_key_id: *mut wire_cst_list_prim_u_8_strict,
		sign_key: *mut wire_cst_list_prim_u_8_strict,
		verify_key: *mut wire_cst_list_prim_u_8_strict,
		exported_public_key: *mut wire_cst_list_prim_u_8_strict,
		exported_public_key_sig_key_id: *mut wire_cst_list_prim_u_8_strict,
		exported_verify_key: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_user_login_out {
		direct: *mut wire_cst_list_prim_u_8_strict,
		master_key: *mut wire_cst_list_prim_u_8_strict,
		auth_key: *mut wire_cst_list_prim_u_8_strict,
	}
	#[repr(C)]
	#[derive(Clone, Copy)]
	pub struct wire_cst_user_public_key_data {
		public_key: *mut wire_cst_list_prim_u_8_strict,
		public_key_id: *mut wire_cst_list_prim_u_8_strict,
		public_key_sig_key_id: *mut wire_cst_list_prim_u_8_strict,
	}
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
	// This file is automatically generated, so please do not edit it.
	// @generated by `flutter_rust_bridge`@ 2.9.0.

	// Section: imports

	use super::*;
	use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
	use flutter_rust_bridge::for_generated::wasm_bindgen;
	use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
	use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
	use flutter_rust_bridge::{Handler, IntoIntoDart};

	// Section: boilerplate

	flutter_rust_bridge::frb_generated_boilerplate_web!();

	// Section: dart2rust

	impl CstDecode<String> for String {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> String {
			self
		}
	}
	impl CstDecode<crate::api::user::Claims> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::Claims {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 5, "Expected 5 elements, got {}", self_.length());
			crate::api::user::Claims {
				aud: self_.get(0).cst_decode(),
				sub: self_.get(1).cst_decode(),
				exp: self_.get(2).cst_decode(),
				iat: self_.get(3).cst_decode(),
				fresh: self_.get(4).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::CryptoRawOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::CryptoRawOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::crypto::CryptoRawOutput {
				head: self_.get(0).cst_decode(),
				data: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::DeviceKeyData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::DeviceKeyData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 6, "Expected 6 elements, got {}", self_.length());
			crate::api::user::DeviceKeyData {
				private_key: self_.get(0).cst_decode(),
				public_key: self_.get(1).cst_decode(),
				sign_key: self_.get(2).cst_decode(),
				verify_key: self_.get(3).cst_decode(),
				exported_public_key: self_.get(4).cst_decode(),
				exported_verify_key: self_.get(5).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::EncryptedHead> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::EncryptedHead {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::crypto::EncryptedHead {
				id: self_.get(0).cst_decode(),
				sign_id: self_.get(1).cst_decode(),
				sign_alg: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 9, "Expected 9 elements, got {}", self_.length());
			crate::api::file::FileData {
				file_id: self_.get(0).cst_decode(),
				master_key_id: self_.get(1).cst_decode(),
				owner: self_.get(2).cst_decode(),
				belongs_to: self_.get(3).cst_decode(),
				belongs_to_type: self_.get(4).cst_decode(),
				encrypted_key: self_.get(5).cst_decode(),
				encrypted_key_alg: self_.get(6).cst_decode(),
				encrypted_file_name: self_.get(7).cst_decode(),
				part_list: self_.get(8).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileDoneRegister> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileDoneRegister {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::file::FileDoneRegister {
				file_id: self_.get(0).cst_decode(),
				session_id: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileDownloadResult> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileDownloadResult {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::file::FileDownloadResult {
				next_file_key: self_.get(0).cst_decode(),
				file: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FilePartListItem> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FilePartListItem {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::file::FilePartListItem {
				part_id: self_.get(0).cst_decode(),
				sequence: self_.get(1).cst_decode(),
				extern_storage: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FilePrepareRegister> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FilePrepareRegister {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::file::FilePrepareRegister {
				encrypted_file_name: self_.get(0).cst_decode(),
				server_input: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::file::FileRegisterOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::FileRegisterOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::file::FileRegisterOutput {
				file_id: self_.get(0).cst_decode(),
				session_id: self_.get(1).cst_decode(),
				encrypted_file_name: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::GeneratedRegisterData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::GeneratedRegisterData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::user::GeneratedRegisterData {
				identifier: self_.get(0).cst_decode(),
				password: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupChildrenList> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupChildrenList {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::group::GroupChildrenList {
				group_id: self_.get(0).cst_decode(),
				time: self_.get(1).cst_decode(),
				parent: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupDataCheckUpdateServerOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupDataCheckUpdateServerOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::group::GroupDataCheckUpdateServerOutput {
				key_update: self_.get(0).cst_decode(),
				rank: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupInviteReqList> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupInviteReqList {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::group::GroupInviteReqList {
				group_id: self_.get(0).cst_decode(),
				time: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupJoinReqList> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupJoinReqList {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::group::GroupJoinReqList {
				user_id: self_.get(0).cst_decode(),
				time: self_.get(1).cst_decode(),
				user_type: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupKeyData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupKeyData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 6, "Expected 6 elements, got {}", self_.length());
			crate::api::group::GroupKeyData {
				private_group_key: self_.get(0).cst_decode(),
				public_group_key: self_.get(1).cst_decode(),
				exported_public_key: self_.get(2).cst_decode(),
				group_key: self_.get(3).cst_decode(),
				time: self_.get(4).cst_decode(),
				group_key_id: self_.get(5).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 12, "Expected 12 elements, got {}", self_.length());
			crate::api::group::GroupOutData {
				group_id: self_.get(0).cst_decode(),
				parent_group_id: self_.get(1).cst_decode(),
				rank: self_.get(2).cst_decode(),
				key_update: self_.get(3).cst_decode(),
				created_time: self_.get(4).cst_decode(),
				joined_time: self_.get(5).cst_decode(),
				keys: self_.get(6).cst_decode(),
				hmac_keys: self_.get(7).cst_decode(),
				sortable_keys: self_.get(8).cst_decode(),
				access_by_group_as_member: self_.get(9).cst_decode(),
				access_by_parent_group: self_.get(10).cst_decode(),
				is_connected_group: self_.get(11).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutDataHmacKeys> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutDataHmacKeys {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::group::GroupOutDataHmacKeys {
				group_key_id: self_.get(0).cst_decode(),
				key_data: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutDataKeys> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutDataKeys {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 4, "Expected 4 elements, got {}", self_.length());
			crate::api::group::GroupOutDataKeys {
				private_key_id: self_.get(0).cst_decode(),
				key_data: self_.get(1).cst_decode(),
				signed_by_user_id: self_.get(2).cst_decode(),
				signed_by_user_sign_key_id: self_.get(3).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupOutDataSortableKeys> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupOutDataSortableKeys {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::group::GroupOutDataSortableKeys {
				group_key_id: self_.get(0).cst_decode(),
				key_data: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupPublicKeyData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupPublicKeyData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::group::GroupPublicKeyData {
				public_key: self_.get(0).cst_decode(),
				public_key_id: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::GroupUserListItem> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::GroupUserListItem {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 4, "Expected 4 elements, got {}", self_.length());
			crate::api::group::GroupUserListItem {
				user_id: self_.get(0).cst_decode(),
				rank: self_.get(1).cst_decode(),
				joined_time: self_.get(2).cst_decode(),
				user_type: self_.get(3).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::KeyRotationGetOut> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::KeyRotationGetOut {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 4, "Expected 4 elements, got {}", self_.length());
			crate::api::user::KeyRotationGetOut {
				pre_group_key_id: self_.get(0).cst_decode(),
				new_group_key_id: self_.get(1).cst_decode(),
				encrypted_eph_key_key_id: self_.get(2).cst_decode(),
				server_output: self_.get(3).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::group::KeyRotationInput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::KeyRotationInput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 8, "Expected 8 elements, got {}", self_.length());
			crate::api::group::KeyRotationInput {
				error: self_.get(0).cst_decode(),
				encrypted_ephemeral_key_by_group_key_and_public_key: self_.get(1).cst_decode(),
				encrypted_group_key_by_ephemeral: self_.get(2).cst_decode(),
				ephemeral_alg: self_.get(3).cst_decode(),
				encrypted_eph_key_key_id: self_.get(4).cst_decode(),
				previous_group_key_id: self_.get(5).cst_decode(),
				time: self_.get(6).cst_decode(),
				new_group_key_id: self_.get(7).cst_decode(),
			}
		}
	}
	impl CstDecode<Vec<String>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<String> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::file::FilePartListItem>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::file::FilePartListItem> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupChildrenList>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupChildrenList> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupInviteReqList>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupInviteReqList> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupJoinReqList>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupJoinReqList> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupOutDataHmacKeys>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupOutDataHmacKeys> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupOutDataKeys>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupOutDataKeys> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupOutDataSortableKeys>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupOutDataSortableKeys> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::GroupUserListItem>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::GroupUserListItem> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<crate::api::group::ListGroups> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::group::ListGroups {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 5, "Expected 5 elements, got {}", self_.length());
			crate::api::group::ListGroups {
				group_id: self_.get(0).cst_decode(),
				time: self_.get(1).cst_decode(),
				joined_time: self_.get(2).cst_decode(),
				rank: self_.get(3).cst_decode(),
				parent: self_.get(4).cst_decode(),
			}
		}
	}
	impl CstDecode<Vec<crate::api::user::KeyRotationGetOut>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::user::KeyRotationGetOut> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::group::ListGroups>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::group::ListGroups> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<u8>> for Box<[u8]> {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<u8> {
			self.into_vec()
		}
	}
	impl CstDecode<Vec<crate::api::user::UserDeviceList>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::user::UserDeviceList> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<Vec<crate::api::user::UserKeyData>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<crate::api::user::UserKeyData> {
			self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap()
				.iter()
				.map(CstDecode::cst_decode)
				.collect()
		}
	}
	impl CstDecode<crate::api::crypto::NonRegisteredKeyOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::NonRegisteredKeyOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::crypto::NonRegisteredKeyOutput {
				key: self_.get(0).cst_decode(),
				encrypted_key: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<Option<String>> for Option<String> {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Option<String> {
			self.map(CstDecode::cst_decode)
		}
	}
	impl CstDecode<crate::api::user::OtpRecoveryKeysOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::OtpRecoveryKeysOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 1, "Expected 1 elements, got {}", self_.length());
			crate::api::user::OtpRecoveryKeysOutput {
				keys: self_.get(0).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::OtpRegister> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::OtpRegister {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::user::OtpRegister {
				secret: self_.get(0).cst_decode(),
				alg: self_.get(1).cst_decode(),
				recover: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::OtpRegisterUrl> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::OtpRegisterUrl {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::user::OtpRegisterUrl {
				url: self_.get(0).cst_decode(),
				recover: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::PreRegisterDeviceData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::PreRegisterDeviceData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::user::PreRegisterDeviceData {
				input: self_.get(0).cst_decode(),
				exported_public_key: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::RegisterDeviceData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::RegisterDeviceData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::user::RegisterDeviceData {
				session_id: self_.get(0).cst_decode(),
				exported_public_key: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::SearchableCreateOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::SearchableCreateOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::crypto::SearchableCreateOutput {
				hashes: self_.get(0).cst_decode(),
				alg: self_.get(1).cst_decode(),
				key_id: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::crypto::SortableEncryptOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::crypto::SortableEncryptOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::crypto::SortableEncryptOutput {
				number: self_.get(0).cst_decode(),
				alg: self_.get(1).cst_decode(),
				key_id: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 7, "Expected 7 elements, got {}", self_.length());
			crate::api::user::UserData {
				jwt: self_.get(0).cst_decode(),
				user_id: self_.get(1).cst_decode(),
				device_id: self_.get(2).cst_decode(),
				refresh_token: self_.get(3).cst_decode(),
				keys: self_.get(4).cst_decode(),
				user_keys: self_.get(5).cst_decode(),
				hmac_keys: self_.get(6).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserDeviceList> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserDeviceList {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::user::UserDeviceList {
				device_id: self_.get(0).cst_decode(),
				time: self_.get(1).cst_decode(),
				device_identifier: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserInitServerOutput> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserInitServerOutput {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
			crate::api::user::UserInitServerOutput {
				jwt: self_.get(0).cst_decode(),
				invites: self_.get(1).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserKeyData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserKeyData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 10, "Expected 10 elements, got {}", self_.length());
			crate::api::user::UserKeyData {
				private_key: self_.get(0).cst_decode(),
				public_key: self_.get(1).cst_decode(),
				group_key: self_.get(2).cst_decode(),
				time: self_.get(3).cst_decode(),
				group_key_id: self_.get(4).cst_decode(),
				sign_key: self_.get(5).cst_decode(),
				verify_key: self_.get(6).cst_decode(),
				exported_public_key: self_.get(7).cst_decode(),
				exported_public_key_sig_key_id: self_.get(8).cst_decode(),
				exported_verify_key: self_.get(9).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserLoginOut> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserLoginOut {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::user::UserLoginOut {
				direct: self_.get(0).cst_decode(),
				master_key: self_.get(1).cst_decode(),
				auth_key: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<crate::api::user::UserPublicKeyData> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::user::UserPublicKeyData {
			let self_ = self
				.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
				.unwrap();
			assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
			crate::api::user::UserPublicKeyData {
				public_key: self_.get(0).cst_decode(),
				public_key_id: self_.get(1).cst_decode(),
				public_key_sig_key_id: self_.get(2).cst_decode(),
			}
		}
	}
	impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> String {
			self.as_string().expect("non-UTF-8 string, or not a string")
		}
	}
	impl CstDecode<crate::api::file::BelongsToType> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> crate::api::file::BelongsToType {
			(self.unchecked_into_f64() as i32).cst_decode()
		}
	}
	impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> bool {
			self.is_truthy()
		}
	}
	impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> i32 {
			self.unchecked_into_f64() as _
		}
	}
	impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> Vec<u8> {
			self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
				.to_vec()
				.into()
		}
	}
	impl CstDecode<u32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> u32 {
			self.unchecked_into_f64() as _
		}
	}
	impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> u64 {
			::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
		}
	}
	impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> u8 {
			self.unchecked_into_f64() as _
		}
	}
	impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
		// Codec=Cst (C-struct based), see doc to use other codecs
		fn cst_decode(self) -> usize {
			::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
		}
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__change_password(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_identifier: String,
		old_password: String,
		new_password: String,
		mfa_token: Option<String>,
		mfa_recovery: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
	) {
		wire__crate__api__user__change_password_impl(
			port_,
			base_url,
			auth_token,
			user_identifier,
			old_password,
			new_password,
			mfa_token,
			mfa_recovery,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__check_user_identifier_available(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_identifier: String,
	) {
		wire__crate__api__user__check_user_identifier_available_impl(port_, base_url, auth_token, user_identifier)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__create_searchable(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: String,
		full: bool,
		limit: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
	) {
		wire__crate__api__crypto__create_searchable_impl(port_, key, data, full, limit)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__create_searchable_raw(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: String,
		full: bool,
		limit: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
	) {
		wire__crate__api__crypto__create_searchable_raw_impl(port_, key, data, full, limit)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__decode_jwt(jwt: String) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__decode_jwt_impl(jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_asymmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		encrypted_data: Box<[u8]>,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__crypto__decrypt_asymmetric_impl(port_, private_key, encrypted_data, verify_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_raw_asymmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		encrypted_data: Box<[u8]>,
		head: String,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__crypto__decrypt_raw_asymmetric_impl(port_, private_key, encrypted_data, head, verify_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_raw_symmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		encrypted_data: Box<[u8]>,
		head: String,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__crypto__decrypt_raw_symmetric_impl(port_, key, encrypted_data, head, verify_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_string_asymmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		encrypted_data: String,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__crypto__decrypt_string_asymmetric_impl(port_, private_key, encrypted_data, verify_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_string_symmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		encrypted_data: String,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__crypto__decrypt_string_symmetric_impl(port_, key, encrypted_data, verify_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_sym_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		master_key: String,
		encrypted_symmetric_key_info: String,
	) {
		wire__crate__api__crypto__decrypt_sym_key_impl(port_, master_key, encrypted_symmetric_key_info)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_sym_key_by_private_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		encrypted_symmetric_key_info: String,
	) {
		wire__crate__api__crypto__decrypt_sym_key_by_private_key_impl(port_, private_key, encrypted_symmetric_key_info)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__decrypt_symmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		encrypted_data: Box<[u8]>,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__crypto__decrypt_symmetric_impl(port_, key, encrypted_data, verify_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__delete_device(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		fresh_jwt: String,
		device_id: String,
	) {
		wire__crate__api__user__delete_device_impl(port_, base_url, auth_token, fresh_jwt, device_id)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__delete_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		fresh_jwt: String,
	) {
		wire__crate__api__user__delete_user_impl(port_, base_url, auth_token, fresh_jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__deserialize_head_from_string(port_: flutter_rust_bridge::for_generated::MessagePort, head: String) {
		wire__crate__api__crypto__deserialize_head_from_string_impl(port_, head)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__disable_otp(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
	) {
		wire__crate__api__user__disable_otp_impl(port_, base_url, auth_token, jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__done_check_user_identifier_available(
		server_output: String,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__done_check_user_identifier_available_impl(server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__done_fetch_sym_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		master_key: String,
		server_out: String,
		non_registered: bool,
	) {
		wire__crate__api__crypto__done_fetch_sym_key_impl(port_, master_key, server_out, non_registered)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__done_fetch_sym_key_by_private_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		server_out: String,
		non_registered: bool,
	) {
		wire__crate__api__crypto__done_fetch_sym_key_by_private_key_impl(port_, private_key, server_out, non_registered)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__done_fetch_user_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		server_output: String,
	) {
		wire__crate__api__user__done_fetch_user_key_impl(port_, private_key, server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__done_register(server_output: String) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__done_register_impl(server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__done_register_device_start(server_output: String) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__done_register_device_start_impl(server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__encrypt_asymmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		reply_public_key_data: String,
		data: Box<[u8]>,
		sign_key: Option<String>,
	) {
		wire__crate__api__crypto__encrypt_asymmetric_impl(port_, reply_public_key_data, data, sign_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__encrypt_raw_asymmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		reply_public_key_data: String,
		data: Box<[u8]>,
		sign_key: Option<String>,
	) {
		wire__crate__api__crypto__encrypt_raw_asymmetric_impl(port_, reply_public_key_data, data, sign_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__encrypt_raw_symmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: Box<[u8]>,
		sign_key: Option<String>,
	) {
		wire__crate__api__crypto__encrypt_raw_symmetric_impl(port_, key, data, sign_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__encrypt_string_asymmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		reply_public_key_data: String,
		data: String,
		sign_key: Option<String>,
	) {
		wire__crate__api__crypto__encrypt_string_asymmetric_impl(port_, reply_public_key_data, data, sign_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__encrypt_string_symmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: String,
		sign_key: Option<String>,
	) {
		wire__crate__api__crypto__encrypt_string_symmetric_impl(port_, key, data, sign_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__encrypt_symmetric(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: Box<[u8]>,
		sign_key: Option<String>,
	) {
		wire__crate__api__crypto__encrypt_symmetric_impl(port_, key, data, sign_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__extract_user_data(port_: flutter_rust_bridge::for_generated::MessagePort, data: String) {
		wire__crate__api__user__extract_user_data_impl(port_, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__fetch_user_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		key_id: String,
		private_key: String,
	) {
		wire__crate__api__user__fetch_user_key_impl(port_, base_url, auth_token, jwt, key_id, private_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_delete_file(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		file_id: String,
		group_id: Option<String>,
		group_as_member: Option<String>,
	) {
		wire__crate__api__file__file_delete_file_impl(port_, base_url, auth_token, jwt, file_id, group_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_done_register_file(port_: flutter_rust_bridge::for_generated::MessagePort, server_output: String) {
		wire__crate__api__file__file_done_register_file_impl(port_, server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_download_and_decrypt_file_part(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		url_prefix: Option<String>,
		auth_token: String,
		part_id: String,
		content_key: String,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__file__file_download_and_decrypt_file_part_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			part_id,
			content_key,
			verify_key_data,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_download_and_decrypt_file_part_start(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		url_prefix: Option<String>,
		auth_token: String,
		part_id: String,
		content_key: String,
		verify_key_data: Option<String>,
	) {
		wire__crate__api__file__file_download_and_decrypt_file_part_start_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			part_id,
			content_key,
			verify_key_data,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_download_file_meta(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: Option<String>,
		id: String,
		group_id: Option<String>,
		group_as_member: Option<String>,
	) {
		wire__crate__api__file__file_download_file_meta_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_download_part_list(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		file_id: String,
		last_sequence: String,
	) {
		wire__crate__api__file__file_download_part_list_impl(port_, base_url, auth_token, file_id, last_sequence)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_file_name_update(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		file_id: String,
		content_key: String,
		file_name: Option<String>,
	) {
		wire__crate__api__file__file_file_name_update_impl(port_, base_url, auth_token, jwt, file_id, content_key, file_name)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_prepare_register_file(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		master_key_id: String,
		content_key: String,
		encrypted_content_key: String,
		belongs_to_id: Option<String>,
		belongs_to_type: String,
		file_name: Option<String>,
	) {
		wire__crate__api__file__file_prepare_register_file_impl(
			port_,
			master_key_id,
			content_key,
			encrypted_content_key,
			belongs_to_id,
			belongs_to_type,
			file_name,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_register_file(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		master_key_id: String,
		content_key: String,
		encrypted_content_key: String,
		belongs_to_id: Option<String>,
		belongs_to_type: String,
		file_name: Option<String>,
		group_id: Option<String>,
		group_as_member: Option<String>,
	) {
		wire__crate__api__file__file_register_file_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			master_key_id,
			content_key,
			encrypted_content_key,
			belongs_to_id,
			belongs_to_type,
			file_name,
			group_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_upload_part(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		url_prefix: Option<String>,
		auth_token: String,
		jwt: String,
		session_id: String,
		end: bool,
		sequence: i32,
		content_key: String,
		sign_key: Option<String>,
		part: Box<[u8]>,
	) {
		wire__crate__api__file__file_upload_part_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			jwt,
			session_id,
			end,
			sequence,
			content_key,
			sign_key,
			part,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__file__file_upload_part_start(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		url_prefix: Option<String>,
		auth_token: String,
		jwt: String,
		session_id: String,
		end: bool,
		sequence: i32,
		content_key: String,
		sign_key: Option<String>,
		part: Box<[u8]>,
	) {
		wire__crate__api__file__file_upload_part_start_impl(
			port_,
			base_url,
			url_prefix,
			auth_token,
			jwt,
			session_id,
			end,
			sequence,
			content_key,
			sign_key,
			part,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__generate_non_register_sym_key(port_: flutter_rust_bridge::for_generated::MessagePort, master_key: String) {
		wire__crate__api__crypto__generate_non_register_sym_key_impl(port_, master_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__generate_non_register_sym_key_by_public_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		reply_public_key: String,
	) {
		wire__crate__api__crypto__generate_non_register_sym_key_by_public_key_impl(port_, reply_public_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__generate_user_register_data(port_: flutter_rust_bridge::for_generated::MessagePort) {
		wire__crate__api__user__generate_user_register_data_impl(port_)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__get_fresh_jwt(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_identifier: String,
		password: String,
		mfa_token: Option<String>,
		mfa_recovery: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
	) {
		wire__crate__api__user__get_fresh_jwt_impl(
			port_,
			base_url,
			auth_token,
			user_identifier,
			password,
			mfa_token,
			mfa_recovery,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__get_otp_recover_keys(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
	) {
		wire__crate__api__user__get_otp_recover_keys_impl(port_, base_url, auth_token, jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__get_user_devices(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		last_fetched_time: String,
		last_fetched_id: String,
	) {
		wire__crate__api__user__get_user_devices_impl(port_, base_url, auth_token, jwt, last_fetched_time, last_fetched_id)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_accept_invite(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_id: Option<String>,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_accept_invite_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_accept_join_req(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		user_id: String,
		key_count: i32,
		rank: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
		admin_rank: i32,
		user_public_key: String,
		group_keys: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_accept_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			key_count,
			rank,
			admin_rank,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_create_child_group(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		parent_public_key: String,
		parent_id: String,
		admin_rank: i32,
		group_as_member: Option<String>,
		sign_key: Option<String>,
		starter: String,
	) {
		wire__crate__api__group__group_create_child_group_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			parent_public_key,
			parent_id,
			admin_rank,
			group_as_member,
			sign_key,
			starter,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_create_connected_group(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		connected_group_id: String,
		admin_rank: i32,
		parent_public_key: String,
		group_as_member: Option<String>,
		sign_key: Option<String>,
		starter: String,
	) {
		wire__crate__api__group__group_create_connected_group_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			connected_group_id,
			admin_rank,
			parent_public_key,
			group_as_member,
			sign_key,
			starter,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_create_group(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		creators_public_key: String,
		group_as_member: Option<String>,
		sign_key: Option<String>,
		starter: String,
	) {
		wire__crate__api__group__group_create_group_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			creators_public_key,
			group_as_member,
			sign_key,
			starter,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_decrypt_hmac_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		group_key: String,
		server_key_data: String,
	) {
		wire__crate__api__group__group_decrypt_hmac_key_impl(port_, group_key, server_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_decrypt_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		server_key_data: String,
		verify_key: Option<String>,
	) {
		wire__crate__api__group__group_decrypt_key_impl(port_, private_key, server_key_data, verify_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_decrypt_sortable_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		group_key: String,
		server_key_data: String,
	) {
		wire__crate__api__group__group_decrypt_sortable_key_impl(port_, group_key, server_key_data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_delete_group(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		admin_rank: i32,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_delete_group_impl(port_, base_url, auth_token, jwt, id, admin_rank, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_delete_sent_join_req(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		admin_rank: i32,
		join_req_group_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_delete_sent_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			join_req_group_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_delete_sent_join_req_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		join_req_group_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_delete_sent_join_req_user_impl(port_, base_url, auth_token, jwt, join_req_group_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_done_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		private_key: String,
		public_key: String,
		pre_group_key: String,
		server_output: String,
	) {
		wire__crate__api__group__group_done_key_rotation_impl(port_, private_key, public_key, pre_group_key, server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_extract_group_data(port_: flutter_rust_bridge::for_generated::MessagePort, server_output: String) {
		wire__crate__api__group__group_extract_group_data_impl(port_, server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_extract_group_keys(port_: flutter_rust_bridge::for_generated::MessagePort, server_output: String) {
		wire__crate__api__group__group_extract_group_keys_impl(port_, server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_finish_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		server_output: String,
		pre_group_key: String,
		public_key: String,
		private_key: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_finish_key_rotation_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			server_output,
			pre_group_key,
			public_key,
			private_key,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_all_first_level_children(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		last_fetched_time: String,
		last_fetched_group_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_all_first_level_children_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			last_fetched_time,
			last_fetched_group_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_done_key_rotation_server_input(
		server_output: String,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__group__group_get_done_key_rotation_server_input_impl(server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_group_data(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_group_data_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_group_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		key_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_group_key_impl(port_, base_url, auth_token, jwt, id, key_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_group_keys(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		last_fetched_time: String,
		last_fetched_key_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_group_keys_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			last_fetched_time,
			last_fetched_key_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_group_updates(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_group_updates_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_groups_for_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		last_fetched_time: String,
		last_fetched_group_id: String,
		group_id: Option<String>,
	) {
		wire__crate__api__group__group_get_groups_for_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			last_fetched_time,
			last_fetched_group_id,
			group_id,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_invites_for_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		last_fetched_time: String,
		last_fetched_group_id: String,
		group_id: Option<String>,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_invites_for_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			last_fetched_time,
			last_fetched_group_id,
			group_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_join_reqs(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		admin_rank: i32,
		last_fetched_time: String,
		last_fetched_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_join_reqs_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			last_fetched_time,
			last_fetched_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_member(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		last_fetched_time: String,
		last_fetched_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_member_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			last_fetched_time,
			last_fetched_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_public_key_data(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		id: String,
	) {
		wire__crate__api__group__group_get_public_key_data_impl(port_, base_url, auth_token, id)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_sent_join_req(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		admin_rank: i32,
		last_fetched_time: String,
		last_fetched_group_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_sent_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			last_fetched_time,
			last_fetched_group_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_get_sent_join_req_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		last_fetched_time: String,
		last_fetched_group_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_get_sent_join_req_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			last_fetched_time,
			last_fetched_group_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_invite_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		user_id: String,
		key_count: i32,
		rank: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
		admin_rank: i32,
		auto_invite: bool,
		group_invite: bool,
		re_invite: bool,
		user_public_key: String,
		group_keys: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_invite_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			key_count,
			rank,
			admin_rank,
			auto_invite,
			group_invite,
			re_invite,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_invite_user_session(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		auto_invite: bool,
		session_id: String,
		user_public_key: String,
		group_keys: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_invite_user_session_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			auto_invite,
			session_id,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_join_req(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_join_req_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_join_user_session(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		session_id: String,
		user_public_key: String,
		group_keys: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_join_user_session_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			session_id,
			user_public_key,
			group_keys,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		public_key: String,
		pre_group_key: String,
		sign_key: Option<String>,
		starter: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_key_rotation_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			public_key,
			pre_group_key,
			sign_key,
			starter,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_kick_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		user_id: String,
		admin_rank: i32,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_kick_user_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			admin_rank,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_pre_done_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_pre_done_key_rotation_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_prepare_create_group(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		creators_public_key: String,
		sign_key: Option<String>,
		starter: String,
	) {
		wire__crate__api__group__group_prepare_create_group_impl(port_, creators_public_key, sign_key, starter)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_prepare_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		pre_group_key: String,
		public_key: String,
		sign_key: Option<String>,
		starter: String,
	) {
		wire__crate__api__group__group_prepare_key_rotation_impl(port_, pre_group_key, public_key, sign_key, starter)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_prepare_keys_for_new_member(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		user_public_key: String,
		group_keys: String,
		key_count: i32,
		rank: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
		admin_rank: i32,
	) {
		wire__crate__api__group__group_prepare_keys_for_new_member_impl(port_, user_public_key, group_keys, key_count, rank, admin_rank)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_prepare_update_rank(
		user_id: String,
		rank: i32,
		admin_rank: i32,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__group__group_prepare_update_rank_impl(user_id, rank, admin_rank)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_reject_invite(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_id: Option<String>,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_reject_invite_impl(port_, base_url, auth_token, jwt, id, group_id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_reject_join_req(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		admin_rank: i32,
		rejected_user_id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_reject_join_req_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			admin_rank,
			rejected_user_id,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_stop_group_invites(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		admin_rank: i32,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_stop_group_invites_impl(port_, base_url, auth_token, jwt, id, admin_rank, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__group_update_rank(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		user_id: String,
		rank: i32,
		admin_rank: i32,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__group_update_rank_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			id,
			user_id,
			rank,
			admin_rank,
			group_as_member,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__init_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		refresh_token: String,
	) {
		wire__crate__api__user__init_user_impl(port_, base_url, auth_token, jwt, refresh_token)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__group__leave_group(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		id: String,
		group_as_member: Option<String>,
	) {
		wire__crate__api__group__leave_group_impl(port_, base_url, auth_token, jwt, id, group_as_member)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__login(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_identifier: String,
		password: String,
	) {
		wire__crate__api__user__login_impl(port_, base_url, auth_token, user_identifier, password)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__mfa_login(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		master_key_encryption: String,
		auth_key: String,
		user_identifier: String,
		token: String,
		recovery: bool,
	) {
		wire__crate__api__user__mfa_login_impl(
			port_,
			base_url,
			auth_token,
			master_key_encryption,
			auth_key,
			user_identifier,
			token,
			recovery,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__prepare_check_user_identifier_available(
		user_identifier: String,
	) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
		wire__crate__api__user__prepare_check_user_identifier_available_impl(user_identifier)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__prepare_register(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		user_identifier: String,
		password: String,
	) {
		wire__crate__api__user__prepare_register_impl(port_, user_identifier, password)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__prepare_register_device(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		server_output: String,
		user_keys: String,
		key_count: i32,
	) {
		wire__crate__api__user__prepare_register_device_impl(port_, server_output, user_keys, key_count)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__prepare_register_device_start(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		device_identifier: String,
		password: String,
	) {
		wire__crate__api__user__prepare_register_device_start_impl(port_, device_identifier, password)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__refresh_jwt(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		refresh_token: String,
	) {
		wire__crate__api__user__refresh_jwt_impl(port_, base_url, auth_token, jwt, refresh_token)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__register(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_identifier: String,
		password: String,
	) {
		wire__crate__api__user__register_impl(port_, base_url, auth_token, user_identifier, password)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__register_device(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		server_output: String,
		key_count: i32,
		user_keys: String,
	) {
		wire__crate__api__user__register_device_impl(port_, base_url, auth_token, jwt, server_output, key_count, user_keys)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__register_device_start(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		device_identifier: String,
		password: String,
	) {
		wire__crate__api__user__register_device_start_impl(port_, base_url, auth_token, device_identifier, password)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__register_otp(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		issuer: String,
		audience: String,
	) {
		wire__crate__api__user__register_otp_impl(port_, base_url, auth_token, jwt, issuer, audience)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__register_raw_otp(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
	) {
		wire__crate__api__user__register_raw_otp_impl(port_, base_url, auth_token, jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__reset_otp(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		issuer: String,
		audience: String,
	) {
		wire__crate__api__user__reset_otp_impl(port_, base_url, auth_token, jwt, issuer, audience)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__reset_password(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		new_password: String,
		decrypted_private_key: String,
		decrypted_sign_key: String,
	) {
		wire__crate__api__user__reset_password_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			new_password,
			decrypted_private_key,
			decrypted_sign_key,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__reset_raw_otp(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
	) {
		wire__crate__api__user__reset_raw_otp_impl(port_, base_url, auth_token, jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__search(port_: flutter_rust_bridge::for_generated::MessagePort, key: String, data: String) {
		wire__crate__api__crypto__search_impl(port_, key, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__sortable_encrypt_number(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
	) {
		wire__crate__api__crypto__sortable_encrypt_number_impl(port_, key, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__sortable_encrypt_raw_number(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		key: String,
		data: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
	) {
		wire__crate__api__crypto__sortable_encrypt_raw_number_impl(port_, key, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__sortable_encrypt_raw_string(port_: flutter_rust_bridge::for_generated::MessagePort, key: String, data: String) {
		wire__crate__api__crypto__sortable_encrypt_raw_string_impl(port_, key, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__sortable_encrypt_string(port_: flutter_rust_bridge::for_generated::MessagePort, key: String, data: String) {
		wire__crate__api__crypto__sortable_encrypt_string_impl(port_, key, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__split_head_and_encrypted_data(port_: flutter_rust_bridge::for_generated::MessagePort, data: Box<[u8]>) {
		wire__crate__api__crypto__split_head_and_encrypted_data_impl(port_, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__crypto__split_head_and_encrypted_string(port_: flutter_rust_bridge::for_generated::MessagePort, data: String) {
		wire__crate__api__crypto__split_head_and_encrypted_string_impl(port_, data)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__update_user(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		user_identifier: String,
	) {
		wire__crate__api__user__update_user_impl(port_, base_url, auth_token, jwt, user_identifier)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_create_safety_number(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		verify_key_1: String,
		user_id_1: String,
		verify_key_2: Option<String>,
		user_id_2: Option<String>,
	) {
		wire__crate__api__user__user_create_safety_number_impl(port_, verify_key_1, user_id_1, verify_key_2, user_id_2)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_device_key_session_upload(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		session_id: String,
		user_public_key: String,
		group_keys: String,
	) {
		wire__crate__api__user__user_device_key_session_upload_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			session_id,
			user_public_key,
			group_keys,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_fetch_public_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_id: String,
	) {
		wire__crate__api__user__user_fetch_public_key_impl(port_, base_url, auth_token, user_id)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_fetch_verify_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		user_id: String,
		verify_key_id: String,
	) {
		wire__crate__api__user__user_fetch_verify_key_impl(port_, base_url, auth_token, user_id, verify_key_id)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_finish_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		server_output: String,
		pre_group_key: String,
		public_key: String,
		private_key: String,
	) {
		wire__crate__api__user__user_finish_key_rotation_impl(
			port_,
			base_url,
			auth_token,
			jwt,
			server_output,
			pre_group_key,
			public_key,
			private_key,
		)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_get_done_key_rotation_server_input(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		server_output: String,
	) {
		wire__crate__api__user__user_get_done_key_rotation_server_input_impl(port_, server_output)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
		public_device_key: String,
		pre_user_key: String,
	) {
		wire__crate__api__user__user_key_rotation_impl(port_, base_url, auth_token, jwt, public_device_key, pre_user_key)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_pre_done_key_rotation(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		base_url: String,
		auth_token: String,
		jwt: String,
	) {
		wire__crate__api__user__user_pre_done_key_rotation_impl(port_, base_url, auth_token, jwt)
	}

	#[wasm_bindgen]
	pub fn wire__crate__api__user__user_verify_user_public_key(
		port_: flutter_rust_bridge::for_generated::MessagePort,
		verify_key: String,
		public_key: String,
	) {
		wire__crate__api__user__user_verify_user_public_key_impl(port_, verify_key, public_key)
	}
}
#[cfg(target_family = "wasm")]
pub use web::*;
